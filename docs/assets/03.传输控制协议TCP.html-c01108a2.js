const e=JSON.parse('{"key":"v-8f21a772","path":"/interview/%E7%BD%91%E7%BB%9C/03.%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AETCP.html","title":"传输控制协议 TCP","lang":"zh-CN","frontmatter":{"description":"传输控制协议 TCP 传输控制协议 TCP 概述 TCP 最主要的特点 TCP 是面向连接的运输层协议。应用程序在使用 TCP 协议之前，必须先建立 TCP 连接。在传送数据完毕后，必须释放已经建立的 TCP 连接 每一条 TCP 连接只能有两个端点，每一条 TCP 连接只能是点对点的(一对一) TCP 提供可靠交付的服务。通过 TCP 连接传送的数据，无差错、不丢失、不重复，并且按序到达 TCP 提供全双工通信。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接受缓存，用来临时存放双向通信的数据 面向字节流。TCP 中的“流”指的是流入到进程或从进程流出的字节序列","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/article/docs/interview/%E7%BD%91%E7%BB%9C/03.%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AETCP.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"传输控制协议 TCP"}],["meta",{"property":"og:description","content":"传输控制协议 TCP 传输控制协议 TCP 概述 TCP 最主要的特点 TCP 是面向连接的运输层协议。应用程序在使用 TCP 协议之前，必须先建立 TCP 连接。在传送数据完毕后，必须释放已经建立的 TCP 连接 每一条 TCP 连接只能有两个端点，每一条 TCP 连接只能是点对点的(一对一) TCP 提供可靠交付的服务。通过 TCP 连接传送的数据，无差错、不丢失、不重复，并且按序到达 TCP 提供全双工通信。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接受缓存，用来临时存放双向通信的数据 面向字节流。TCP 中的“流”指的是流入到进程或从进程流出的字节序列"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/article/docs/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"传输控制协议 TCP"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"传输控制协议 TCP\\",\\"image\\":[\\"https://mister-hope.github.io/article/docs/\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"传输控制协议 TCP 概述","slug":"传输控制协议-tcp-概述","link":"#传输控制协议-tcp-概述","children":[{"level":3,"title":"TCP 最主要的特点","slug":"tcp-最主要的特点","link":"#tcp-最主要的特点","children":[]},{"level":3,"title":"面向字节流","slug":"面向字节流","link":"#面向字节流","children":[]},{"level":3,"title":"TCP 的连接","slug":"tcp-的连接","link":"#tcp-的连接","children":[]},{"level":3,"title":"易混淆的 socket","slug":"易混淆的-socket","link":"#易混淆的-socket","children":[]}]},{"level":2,"title":"可靠传输的工作原理","slug":"可靠传输的工作原理","link":"#可靠传输的工作原理","children":[{"level":3,"title":"理想的传输条件","slug":"理想的传输条件","link":"#理想的传输条件","children":[]},{"level":3,"title":"停止等待协议","slug":"停止等待协议","link":"#停止等待协议","children":[]},{"level":3,"title":"连续 ARQ 协议","slug":"连续-arq-协议","link":"#连续-arq-协议","children":[]}]},{"level":2,"title":"TCP 报文段的首部格式","slug":"tcp-报文段的首部格式","link":"#tcp-报文段的首部格式","children":[{"level":3,"title":"首部字段","slug":"首部字段","link":"#首部字段","children":[]}]},{"level":2,"title":"TCP 可靠传输的实现","slug":"tcp-可靠传输的实现","link":"#tcp-可靠传输的实现","children":[{"level":3,"title":"以字节为单位的滑动窗口","slug":"以字节为单位的滑动窗口","link":"#以字节为单位的滑动窗口","children":[]},{"level":3,"title":"超时重传时间的选择","slug":"超时重传时间的选择","link":"#超时重传时间的选择","children":[]}]},{"level":2,"title":"TCP 流量控制","slug":"tcp-流量控制","link":"#tcp-流量控制","children":[{"level":3,"title":"利用滑动窗口实现流量控制","slug":"利用滑动窗口实现流量控制","link":"#利用滑动窗口实现流量控制","children":[]},{"level":3,"title":"TCP 的传输效率","slug":"tcp-的传输效率","link":"#tcp-的传输效率","children":[]}]},{"level":2,"title":"TCP 的拥塞控制","slug":"tcp-的拥塞控制","link":"#tcp-的拥塞控制","children":[{"level":3,"title":"拥塞控制的一般原理","slug":"拥塞控制的一般原理","link":"#拥塞控制的一般原理","children":[]},{"level":3,"title":"TCP 的拥塞控制方法","slug":"tcp-的拥塞控制方法","link":"#tcp-的拥塞控制方法","children":[]}]},{"level":2,"title":"TCP 的运输连接管理","slug":"tcp-的运输连接管理","link":"#tcp-的运输连接管理","children":[{"level":3,"title":"TCP 的连接建立","slug":"tcp-的连接建立","link":"#tcp-的连接建立","children":[]},{"level":3,"title":"TCP 的连接释放","slug":"tcp-的连接释放","link":"#tcp-的连接释放","children":[]},{"level":3,"title":"TCP 的有限状态机","slug":"tcp-的有限状态机","link":"#tcp-的有限状态机","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":30.85,"words":9256},"filePathRelative":"interview/网络/03.传输控制协议TCP.md","excerpt":"<h1> 传输控制协议 TCP</h1>\\n<h2> 传输控制协议 TCP 概述</h2>\\n<h3> TCP 最主要的特点</h3>\\n<ul>\\n<li>TCP 是<code>面向连接的运输层协议</code>。应用程序在使用 TCP 协议之前，必须先建立 TCP 连接。在传送数据完毕后，必须释放已经建立的 TCP 连接</li>\\n<li>每一条 TCP 连接只能有两个<code>端点</code>，每一条 TCP 连接只能是<code>点对点</code>的(一对一)</li>\\n<li>TCP 提供<code>可靠交付</code>的服务。通过 TCP 连接传送的数据，无差错、不丢失、不重复，并且按序到达</li>\\n<li>TCP 提供<code>全双工通信</code>。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接受缓存，用来临时存放双向通信的数据</li>\\n<li><code>面向字节流</code>。TCP 中的“流”指的是<code>流入到进程或从进程流出的字节序列</code></li>\\n</ul>","autoDesc":true}');export{e as data};
