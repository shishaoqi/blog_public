const t=JSON.parse('{"key":"v-4557b91c","path":"/interview/Golang/context.html","title":"context","lang":"zh-CN","frontmatter":{"description":"context context 概念 Go1.7 标准库引入 context，中文译作“上下文”，准确说它是 goroutine 的上下文。主要用来在 goroutine 之间传递上下文信息，包括：取消信号、超时时间、截止时间、存取k-v 等。 应用 使用 context 几乎成为并发控制和超时控制的标准做法，与它协作的 API 都可以由外部控制执行“取消”操作。 协程模型可能带来的问题 Go 语言中的 server 实际是一个“协程模型”，处理一个请求需要多个协程。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/article/docs/interview/Golang/context.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"context"}],["meta",{"property":"og:description","content":"context context 概念 Go1.7 标准库引入 context，中文译作“上下文”，准确说它是 goroutine 的上下文。主要用来在 goroutine 之间传递上下文信息，包括：取消信号、超时时间、截止时间、存取k-v 等。 应用 使用 context 几乎成为并发控制和超时控制的标准做法，与它协作的 API 都可以由外部控制执行“取消”操作。 协程模型可能带来的问题 Go 语言中的 server 实际是一个“协程模型”，处理一个请求需要多个协程。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"context\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"context 概念","slug":"context-概念","link":"#context-概念","children":[{"level":3,"title":"应用","slug":"应用","link":"#应用","children":[]},{"level":3,"title":"协程模型可能带来的问题","slug":"协程模型可能带来的问题","link":"#协程模型可能带来的问题","children":[]},{"level":3,"title":"采用 context 解决","slug":"采用-context-解决","link":"#采用-context-解决","children":[]},{"level":3,"title":"context 运用","slug":"context-运用","link":"#context-运用","children":[]},{"level":3,"title":"官方使用建议","slug":"官方使用建议","link":"#官方使用建议","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.91,"words":572},"filePathRelative":"interview/Golang/context.md","excerpt":"<h1> context</h1>\\n<h2> context 概念</h2>\\n<p>Go1.7 标准库引入 context，中文译作“上下文”，准确说它是 goroutine 的上下文。主要用来在 goroutine 之间传递上下文信息，包括：取消信号、超时时间、截止时间、存取k-v 等。</p>\\n<h3> 应用</h3>\\n<ul>\\n<li>使用 context 几乎成为并发控制和超时控制的标准做法，与它协作的 API 都可以由外部控制执行“取消”操作。</li>\\n</ul>\\n<h3> 协程模型可能带来的问题</h3>\\n<p>Go 语言中的 server 实际是一个“协程模型”，处理一个请求需要多个协程。</p>","autoDesc":true}');export{t as data};
