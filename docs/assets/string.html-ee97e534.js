import{_ as n,W as s,X as a,a2 as t}from"./framework-7d1f27fd.js";const e={},p=t(`<h1 id="中文字符串截取" tabindex="-1"><a class="header-anchor" href="#中文字符串截取" aria-hidden="true">#</a> 中文字符串截取</h1><p>在go语言中可以通过切片截取一个数组或字符串，但是当截取的字符串是中文时，可能会出现的问题是：由于一个字不只是由一个字节组成，所以直接通过切片获取可能会把一个中文的编码截成两半，结果导致最后一个字符是乱码。</p><blockquote><p>解决办法可以先将其转为 []rune 类型，再截取后，转回字符类型。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;unicode/utf8&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    str <span class="token operator">:=</span> <span class="token string">&quot;在Go中可以通过切片截取一个数组或字符串&quot;</span>

    <span class="token comment">// 打印字符串长度</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>utf8<span class="token punctuation">.</span><span class="token function">RuneCountInString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 打印字节长度</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>

    str1 <span class="token operator">:=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>

    strRune <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
    <span class="token comment">// 转换后的长度</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>strRune<span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;string = &quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>strRune<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="按单词或字节反转字符串" tabindex="-1"><a class="header-anchor" href="#按单词或字节反转字符串" aria-hidden="true">#</a> 按单词或字节反转字符串</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	str <span class="token operator">:=</span> <span class="token string">&quot;123456abc&quot;</span>
	strRev <span class="token operator">:=</span> <span class="token function">reversal</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strRev<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">reversal</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	l <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
	r <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> l<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成随机字符串" tabindex="-1"><a class="header-anchor" href="#生成随机字符串" aria-hidden="true">#</a> 生成随机字符串</h3><h4 id="用-math-rand-包生成随机字符串" tabindex="-1"><a class="header-anchor" href="#用-math-rand-包生成随机字符串" aria-hidden="true">#</a> 用 math/rand 包生成随机字符串</h4><h4 id="用-crypto-rand-包生成随机字符串" tabindex="-1"><a class="header-anchor" href="#用-crypto-rand-包生成随机字符串" aria-hidden="true">#</a> 用 crypto/rand 包生成随机字符串</h4><h4 id="用哈希来表示随机字符串" tabindex="-1"><a class="header-anchor" href="#用哈希来表示随机字符串" aria-hidden="true">#</a> 用哈希来表示随机字符串</h4><h3 id="控制大小写" tabindex="-1"><a class="header-anchor" href="#控制大小写" aria-hidden="true">#</a> 控制大小写</h3><p>go 语言的 strings 包提供了 ToLower() 和 ToUpper() 函数，用于将字符串转换成小写和大写，其定义如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ToUpper</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token keyword">func</span> <span class="token function">ToLower</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="去除字符串首尾的空格" tabindex="-1"><a class="header-anchor" href="#去除字符串首尾的空格" aria-hidden="true">#</a> 去除字符串首尾的空格</h3><p>strings 包</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TrimSpace</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>

<span class="token keyword">func</span> <span class="token function">Trim</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> cutset <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成-csv-数据-解析-csv-数据" tabindex="-1"><a class="header-anchor" href="#生成-csv-数据-解析-csv-数据" aria-hidden="true">#</a> 生成 CSV 数据 -- 解析 CSV 数据</h3><h3 id="获取中文字符串" tabindex="-1"><a class="header-anchor" href="#获取中文字符串" aria-hidden="true">#</a> 获取中文字符串</h3><h3 id="按指定函数分割字符串" tabindex="-1"><a class="header-anchor" href="#按指定函数分割字符串" aria-hidden="true">#</a> 按指定函数分割字符串</h3><p>strings 包 提供了一个名为 FieldsFunc() 的函数来分割字符串，该方法定义如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">FieldsFunc</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">rune</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;strings&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fn <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token builtin">rune</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">ContainsRune</span><span class="token punctuation">(</span><span class="token string">&quot;,|/*&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	srcStr <span class="token operator">:=</span> <span class="token string">&quot;Python,Jquery|JavaS*cript,Go,C++/C&quot;</span>
	str <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">FieldsFunc</span><span class="token punctuation">(</span>srcStr<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="合并与分割字符串" tabindex="-1"><a class="header-anchor" href="#合并与分割字符串" aria-hidden="true">#</a> 合并与分割字符串</h3><h4 id="合并" tabindex="-1"><a class="header-anchor" href="#合并" aria-hidden="true">#</a> 合并</h4><p>strings 包中提供一个名为 Join() 的函数，定义如下：</p><h4 id="分割" tabindex="-1"><a class="header-anchor" href="#分割" aria-hidden="true">#</a> 分割</h4><p>strings 包提供了 Split()、SplitN()、SplitAfter()、SplitAfterN() 4个分割字符串函数</p><ol><li></li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Split</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sep <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>s 为正则分割的字符串</li><li>sep 为分割符</li></ul><ol start="2"><li></li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">SplitN</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sep <span class="token builtin">string</span><span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>s 为正则分割的字符串</li><li>sep 为分割符</li><li>n 为控制分割的片数，n 如果为-1则不限制片数</li></ul><ol start="3"><li></li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">SplitAfter</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sep <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>s 为正则分割的字符串</li><li>sep 为分割符</li></ul><ol start="4"><li></li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">SplitAfterN</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sep <span class="token builtin">string</span><span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>s 为正则分割的字符串</li><li>sep 为分割符</li></ul><h3 id="按照指定函数截取字符串" tabindex="-1"><a class="header-anchor" href="#按照指定函数截取字符串" aria-hidden="true">#</a> 按照指定函数截取字符串</h3>`,41),i=[p];function o(c,l){return s(),a("div",null,i)}const r=n(e,[["render",o],["__file","string.html.vue"]]);export{r as default};
