const n=JSON.parse(`{"key":"v-4e33cc43","path":"/interview/PHP/PHP%E5%8F%8D%E5%B0%84%E8%AF%A6%E8%A7%A3.html","title":"PHP 反射详解","lang":"zh-CN","frontmatter":{"description":"PHP 反射详解 面向对象编程中对象被赋予了自省的能力，而这个自省的过程就是反射。 反射，直观理解就是根据到达地找到出发地和来源。比如，一个光秃秃的对象，我们可以仅仅通过这个对象就能知道它所属的类、拥有哪些方法。 反射是指在PHP运行状态中，扩展分析PHP程序，导出或提出关于类、方法、属性、参数等的详细信息，包括注释。这种动态获取信息以及动态调用对象方法的功能称为反射API。 如何使用反射 API class person { \\tpublic $name; \\tpublic $gender; \\tpublic function say(){ \\t\\techo $this-&gt;name,\\" \\\\tis \\",$this-&gt;gender,\\"\\\\r\\\\n\\"; \\t} \\tpublic function set($name, $value) \\t{ \\t\\techo \\"Setting $name to $value \\\\r\\\\n\\"; \\t\\t$this-&gt;$name= $value; \\t} \\tpublic function get($name) \\t{ \\t\\tif(!isset($this-&gt;$name)){ \\t\\t\\techo '未设置';　 \\t\\t\\t$this-&gt;$name=\\"正在为你设置默认值\\"; \\t\\t} \\t\\treturn $this-&gt;$name; \\t} } $student = new person(); $student-&gt;name = 'Tom'; $student-&gt;gender = 'male'; $student-&gt;age = 24;","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/article/docs/interview/PHP/PHP%E5%8F%8D%E5%B0%84%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"PHP 反射详解"}],["meta",{"property":"og:description","content":"PHP 反射详解 面向对象编程中对象被赋予了自省的能力，而这个自省的过程就是反射。 反射，直观理解就是根据到达地找到出发地和来源。比如，一个光秃秃的对象，我们可以仅仅通过这个对象就能知道它所属的类、拥有哪些方法。 反射是指在PHP运行状态中，扩展分析PHP程序，导出或提出关于类、方法、属性、参数等的详细信息，包括注释。这种动态获取信息以及动态调用对象方法的功能称为反射API。 如何使用反射 API class person { \\tpublic $name; \\tpublic $gender; \\tpublic function say(){ \\t\\techo $this-&gt;name,\\" \\\\tis \\",$this-&gt;gender,\\"\\\\r\\\\n\\"; \\t} \\tpublic function set($name, $value) \\t{ \\t\\techo \\"Setting $name to $value \\\\r\\\\n\\"; \\t\\t$this-&gt;$name= $value; \\t} \\tpublic function get($name) \\t{ \\t\\tif(!isset($this-&gt;$name)){ \\t\\t\\techo '未设置';　 \\t\\t\\t$this-&gt;$name=\\"正在为你设置默认值\\"; \\t\\t} \\t\\treturn $this-&gt;$name; \\t} } $student = new person(); $student-&gt;name = 'Tom'; $student-&gt;gender = 'male'; $student-&gt;age = 24;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PHP 反射详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"如何使用反射 API","slug":"如何使用反射-api","link":"#如何使用反射-api","children":[]},{"level":2,"title":"反射有什么作用","slug":"反射有什么作用","link":"#反射有什么作用","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.26,"words":979},"filePathRelative":"interview/PHP/PHP反射详解.md","excerpt":"<h1> PHP 反射详解</h1>\\n<p>面向对象编程中对象被赋予了自省的能力，而这个自省的过程就是反射。\\n反射，直观理解就是根据到达地找到出发地和来源。比如，一个光秃秃的对象，我们可以仅仅通过这个对象就能知道它所属的类、拥有哪些方法。\\n反射是指在PHP运行状态中，扩展分析PHP程序，导出或提出关于类、方法、属性、参数等的详细信息，包括注释。这种动态获取信息以及动态调用对象方法的功能称为反射API。</p>\\n<h2> 如何使用反射 API</h2>\\n<div class=\\"language-php line-numbers-mode\\" data-ext=\\"php\\"><pre class=\\"language-php\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name-definition class-name\\">person</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token variable\\">$name</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token variable\\">$gender</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function-definition function\\">say</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">echo</span> <span class=\\"token variable\\">$this</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token property\\">name</span><span class=\\"token punctuation\\">,</span><span class=\\"token string double-quoted-string\\">\\" \\\\tis \\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token variable\\">$this</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token property\\">gender</span><span class=\\"token punctuation\\">,</span><span class=\\"token string double-quoted-string\\">\\"\\\\r\\\\n\\"</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function-definition function\\">set</span><span class=\\"token punctuation\\">(</span><span class=\\"token variable\\">$name</span><span class=\\"token punctuation\\">,</span> <span class=\\"token variable\\">$value</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">echo</span> <span class=\\"token string double-quoted-string\\">\\"Setting <span class=\\"token interpolation\\"><span class=\\"token variable\\">$name</span></span> to <span class=\\"token interpolation\\"><span class=\\"token variable\\">$value</span></span> \\\\r\\\\n\\"</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token variable\\">$this</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token variable\\">$name</span><span class=\\"token operator\\">=</span> <span class=\\"token variable\\">$value</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function-definition function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token variable\\">$name</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token keyword\\">isset</span><span class=\\"token punctuation\\">(</span><span class=\\"token variable\\">$this</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token variable\\">$name</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">echo</span> <span class=\\"token string single-quoted-string\\">'未设置'</span><span class=\\"token punctuation\\">;</span>　\\n\\t\\t\\t<span class=\\"token variable\\">$this</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token variable\\">$name</span><span class=\\"token operator\\">=</span><span class=\\"token string double-quoted-string\\">\\"正在为你设置默认值\\"</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n  \\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token variable\\">$this</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token variable\\">$name</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token variable\\">$student</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">person</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token variable\\">$student</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token property\\">name</span> <span class=\\"token operator\\">=</span> <span class=\\"token string single-quoted-string\\">'Tom'</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token variable\\">$student</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token property\\">gender</span> <span class=\\"token operator\\">=</span> <span class=\\"token string single-quoted-string\\">'male'</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token variable\\">$student</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token property\\">age</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">24</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
