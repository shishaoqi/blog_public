import{_ as a,W as e,X as h,a2 as r}from"./framework-7d1f27fd.js";const d={},i=r('<h1 id="树" tabindex="-1"><a class="header-anchor" href="#树" aria-hidden="true">#</a> 树</h1><p>在计算机科学中，<code>树</code>(Tree)是一种抽象数据类型(ADT)或是实现这种抽象数据类型的数据结构，用来模拟具有树状结构性质的数据集合。树是一种十分重要的<code>非线性数据结构</code>。</p><h2 id="树的定义、表示和术语" tabindex="-1"><a class="header-anchor" href="#树的定义、表示和术语" aria-hidden="true">#</a> 树的定义、表示和术语</h2><p>树是 n(n≥0)个结点构成的有限集合。当 n=0 时，称为空树。对于任意非空树(n&gt;0)，具备如下特点。</p><ul><li>每个节点都只有有限个子节点或无子节点</li><li>没有父节点的节点称为根节点</li><li>每一个非根节点有且只有一个父节点</li><li>除了根节点外，每个子节点可以分为多个不相交的子树</li><li>树里面没有环路(cycle)</li></ul><h2 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h2><h3 id="二叉树的定义" tabindex="-1"><a class="header-anchor" href="#二叉树的定义" aria-hidden="true">#</a> 二叉树的定义</h3><p>在计算机科学中，<code>二叉树</code>(Binary tree)是每个节点最多只有两个分支的树结构。通常分支被称作&quot;左子树&quot;或&quot;右子树&quot;。二叉树的分支具有左右次序，不能随意颠倒。</p><figure><img src="" alt="二叉树五种基本形态" tabindex="0" loading="lazy"><figcaption>二叉树五种基本形态</figcaption></figure><h3 id="二叉树的性质" tabindex="-1"><a class="header-anchor" href="#二叉树的性质" aria-hidden="true">#</a> 二叉树的性质</h3><h3 id="二叉树的存储结构" tabindex="-1"><a class="header-anchor" href="#二叉树的存储结构" aria-hidden="true">#</a> 二叉树的存储结构</h3><h3 id="二叉树的操作" tabindex="-1"><a class="header-anchor" href="#二叉树的操作" aria-hidden="true">#</a> 二叉树的操作</h3><h2 id="二叉搜索树" tabindex="-1"><a class="header-anchor" href="#二叉搜索树" aria-hidden="true">#</a> 二叉搜索树</h2><h3 id="二叉搜索树的定义" tabindex="-1"><a class="header-anchor" href="#二叉搜索树的定义" aria-hidden="true">#</a> 二叉搜索树的定义</h3><h3 id="二叉搜索树的动态查找" tabindex="-1"><a class="header-anchor" href="#二叉搜索树的动态查找" aria-hidden="true">#</a> 二叉搜索树的动态查找</h3><h3 id="二叉搜索树的插入" tabindex="-1"><a class="header-anchor" href="#二叉搜索树的插入" aria-hidden="true">#</a> 二叉搜索树的插入</h3><h3 id="二叉搜索树的删除" tabindex="-1"><a class="header-anchor" href="#二叉搜索树的删除" aria-hidden="true">#</a> 二叉搜索树的删除</h3><h2 id="平衡二叉树" tabindex="-1"><a class="header-anchor" href="#平衡二叉树" aria-hidden="true">#</a> 平衡二叉树</h2><h3 id="平衡二叉树的定义" tabindex="-1"><a class="header-anchor" href="#平衡二叉树的定义" aria-hidden="true">#</a> 平衡二叉树的定义</h3><h3 id="平衡二叉树的调整" tabindex="-1"><a class="header-anchor" href="#平衡二叉树的调整" aria-hidden="true">#</a> 平衡二叉树的调整</h3><h2 id="树的应用" tabindex="-1"><a class="header-anchor" href="#树的应用" aria-hidden="true">#</a> 树的应用</h2><h3 id="堆及其操作" tabindex="-1"><a class="header-anchor" href="#堆及其操作" aria-hidden="true">#</a> 堆及其操作</h3><h3 id="哈夫曼树" tabindex="-1"><a class="header-anchor" href="#哈夫曼树" aria-hidden="true">#</a> 哈夫曼树</h3>',23),n=[i];function t(c,s){return e(),h("div",null,n)}const l=a(d,[["render",t],["__file","04.树.html.vue"]]);export{l as default};
