import{_ as e,W as p,X as t,Y as s,Z as o,$ as l,a2 as a,C as c}from"./framework-7d1f27fd.js";const i={},r=a(`<h1 id="sql-注入" tabindex="-1"><a class="header-anchor" href="#sql-注入" aria-hidden="true">#</a> SQL 注入</h1><p>输入的字符串中注入 SQL 指令，若程序当中忽略了字符检查，导致恶意指令被执行而遭到破坏或入侵</p><h4 id="sql-注入示例" tabindex="-1"><a class="header-anchor" href="#sql-注入示例" aria-hidden="true">#</a> SQL 注入示例</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;SELECT * FROM \`user\` WHERE \`id\`=<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$id</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将传递参数改为</p><blockquote><p>1;DROP TABLE OrdersTable--</p></blockquote><h4 id="sql-注入防御" tabindex="-1"><a class="header-anchor" href="#sql-注入防御" aria-hidden="true">#</a> SQL 注入防御</h4><ul><li>使用预编译语句绑定变量(最佳方式)</li><li>使用安全的存储过程(也可能存在注入问题)</li><li>检查输入数据的数据类型(可对抗注入)</li><li>数据库最小权限原则</li></ul><h3 id="如何防止sql注入" tabindex="-1"><a class="header-anchor" href="#如何防止sql注入" aria-hidden="true">#</a> 如何防止sql注入</h3><ol><li>代码层防止sql注入攻击的最佳方案就是sql预编译</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public List&lt;Course&gt; orderList(String studentId){
    String sql = &quot;select id,course_id,student_id,status from course where student_id = ?&quot;;
    return jdbcTemplate.query(sql,new Object[]{studentId},new BeanPropertyRowMapper(Course.class));
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们传进来的参数 4 or 1 = 1就会被当作是一个student_id，所以就不会出现sql注入了。</p><ol start="2"><li><p>确认每种数据的类型，比如是数字，数据库则必须使用int类型来存储</p></li><li><p>规定数据长度，能在一定程度上防止sql注入</p></li><li><p>严格限制数据库权限，能最大程度减少sql注入的危害</p></li><li><p>避免直接响应一些sql异常信息，sql发生异常后，自定义异常进行响应</p></li><li><p>过滤参数中含有的一些数据库关键词</p></li></ol><blockquote><p>现在的数据库系统都提供SQL语句的预编译（prepare）和查询参数绑定功能，在SQL语句中放置占位符&#39;?&#39;，然后将带有占位符的SQL语句传给<code>数据库编译</code>，执行的时候才将用户输入的数据作为执行的参数传给数据库。这样的操作不仅使得SQL语句在书写的时候不再需要拼接，看起来也更直接，而且用户输入的数据也没有机会被送到数据库的SQL解释器被编译执行，也就不会越权变成代码。</p></blockquote>`,14),u={href:"https://www.cnblogs.com/leezhxing/p/5282437.html",target:"_blank",rel:"noopener noreferrer"},d=a(`<h1 id="pdo" tabindex="-1"><a class="header-anchor" href="#pdo" aria-hidden="true">#</a> PDO</h1><h2 id="什么是pdo" tabindex="-1"><a class="header-anchor" href="#什么是pdo" aria-hidden="true">#</a> 什么是PDO</h2><p>PDO 是PHP Data Objects（php数据对象）的缩写。是在php5.1版本之后开始支持 pdo。你可以把 pdo 看做是php提供的一个类。它提供了一组数据库抽象层API，使得编写php代码不再关心具体要连接的数据库类型。你既可以用使用pdo连接mysql，也可以用它连接oracle。并且pdo很好的解决了sql注入问题。</p><h3 id="pdo如何解决sql注入" tabindex="-1"><a class="header-anchor" href="#pdo如何解决sql注入" aria-hidden="true">#</a> PDO如何解决sql注入</h3><p>在php5.3.6之后，pdo不会在本地对sql进行拼接然后将拼接后的sql传递给mysql server处理（也就是不会在本地做转义处理）。pdo的处理方法是在prepare函数调用时，将预处理好的sql模板（包含占位符）通过mysql协议传递给mysql server，告诉mysql server模板的结构以及语义。当调用execute时，将两个参数传递给mysql server。由mysql server完成变量的转移处理。将sql模板和变量分两次传递，即解决了sql注入问题。</p><h3 id="pdo-使用实例" tabindex="-1"><a class="header-anchor" href="#pdo-使用实例" aria-hidden="true">#</a> PDO 使用实例</h3><h4 id="_1、实例化对象" tabindex="-1"><a class="header-anchor" href="#_1、实例化对象" aria-hidden="true">#</a> 1、实例化对象：</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;mysql:host=<span class="token interpolation"><span class="token variable">$host</span></span>;port=<span class="token interpolation"><span class="token variable">$port</span></span>;dbname=<span class="token interpolation"><span class="token variable">$dbName</span></span>&quot;</span><span class="token punctuation">,</span>
        <span class="token variable">$userName</span><span class="token punctuation">,</span>
        <span class="token variable">$passWord</span><span class="token punctuation">,</span>
        <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">ATTR_PERSISTENT</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
        <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">ATTR_TIMEOUT</span> <span class="token operator">=&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//PDO::ATTR_PERSISTENT =&gt; true  将连接类型设置为持久连接，避免脚本每次需要与数据库对话时都要部署一个新的链接，减少了资源消耗</span>
    <span class="token comment">//PDO::ATTR_TIMEOUT =&gt; 5  设置数据库连接超时的时间为5秒</span>
    <span class="token variable">$pdo</span><span class="token operator">-&gt;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改默认的错误显示级别</span>
    <span class="token variable">$pdo</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;SET NAMES &#39;utf8&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$pdo</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;SET character_set_client=binary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PDOException</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">&quot; in function construct port:&quot;</span><span class="token operator">.</span><span class="token variable">$port</span><span class="token operator">.</span><span class="token string double-quoted-string">&quot; db_name:&quot;</span><span class="token operator">.</span><span class="token variable">$dbName</span><span class="token punctuation">,</span> <span class="token number">90100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、-对-sql-进行预处理" tabindex="-1"><a class="header-anchor" href="#_2、-对-sql-进行预处理" aria-hidden="true">#</a> 2、 对 sql 进行预处理</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;select * from the_table where id = ? and uid = ?&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$st</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>实例化pdo对象之后，首先是对请求mysql的sql语句做预处理。在这里，我们使用了占位符的方式，将该sql传入prepare函数后，预处理函数就会得到本次查询语句的sql模板类，并将这个模板类返回，模板可以防止传那些有猫腻的变量改变本身查询语句的语义。</p><h4 id="_3、绑定查询参数" tabindex="-1"><a class="header-anchor" href="#_3、绑定查询参数" aria-hidden="true">#</a> 3、绑定查询参数</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$st</span><span class="token operator">-&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$st</span><span class="token operator">-&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">20001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token variable">$uid</span> <span class="token operator">=</span> <span class="token number">20001</span><span class="token punctuation">;</span>
<span class="token variable">$st</span><span class="token operator">-&gt;</span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$st</span><span class="token operator">-&gt;</span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token variable">$uid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对sql模板绑定参数，可以使用两种方法，bindValue和bindParam，通过代码能看出区别，bindValue是传入值，bindParam是传入变量。其中两个函数中的第一个参数“数字”代表为占位符中的第几个参数。</p><h4 id="_4、执行语句" tabindex="-1"><a class="header-anchor" href="#_4、执行语句" aria-hidden="true">#</a> 4、执行语句</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$st</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$st</span><span class="token operator">-&gt;</span><span class="token function">fetchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>execute( )执行预准备语句，fetchAll( )返回包含所有结果集行的数组。</p><p>pdo的整个执行使用过程就是这样，我觉得最重要的一步就是理解如何绑定查询参数。</p>`,20);function k(b,v){const n=c("ExternalLinkIcon");return p(),t("div",null,[r,s("p",null,[s("a",u,[o("https://www.cnblogs.com/leezhxing/p/5282437.html"),l(n)])]),d])}const m=e(i,[["render",k],["__file","SQL 注入.html.vue"]]);export{m as default};
