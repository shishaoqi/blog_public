import{_ as n,W as s,X as a,a2 as t}from"./framework-7d1f27fd.js";const p={},e=t(`<h1 id="php-反射详解" tabindex="-1"><a class="header-anchor" href="#php-反射详解" aria-hidden="true">#</a> PHP 反射详解</h1><p>面向对象编程中对象被赋予了自省的能力，而这个自省的过程就是反射。 反射，直观理解就是根据到达地找到出发地和来源。比如，一个光秃秃的对象，我们可以仅仅通过这个对象就能知道它所属的类、拥有哪些方法。 反射是指在PHP运行状态中，扩展分析PHP程序，导出或提出关于类、方法、属性、参数等的详细信息，包括注释。这种动态获取信息以及动态调用对象方法的功能称为反射API。</p><h2 id="如何使用反射-api" tabindex="-1"><a class="header-anchor" href="#如何使用反射-api" aria-hidden="true">#</a> 如何使用反射 API</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">person</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token variable">$gender</span><span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot; \\tis &quot;</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">gender</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;\\r\\n&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">set</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Setting <span class="token interpolation"><span class="token variable">$name</span></span> to <span class="token interpolation"><span class="token variable">$value</span></span> \\r\\n&quot;</span><span class="token punctuation">;</span>
		<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token variable">$name</span><span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;未设置&#39;</span><span class="token punctuation">;</span>　
			<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;正在为你设置默认值&quot;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
  		<span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token variable">$name</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$student</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$student</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Tom&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$student</span><span class="token operator">-&gt;</span><span class="token property">gender</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;male&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$student</span><span class="token operator">-&gt;</span><span class="token property">age</span> <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，要获取这个student对象的方法和属性列表该怎么做呢？</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// 获取对象属性列表</span>
<span class="token variable">$reflect</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionObject</span><span class="token punctuation">(</span><span class="token variable">$student</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$props</span>　<span class="token operator">=</span> <span class="token variable">$reflect</span><span class="token operator">-&gt;</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$props</span> <span class="token keyword">as</span> <span class="token variable">$prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">print</span> <span class="token variable">$prop</span><span class="token operator">-&gt;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span><span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 获取对象方法列表</span>
<span class="token variable">$m</span> <span class="token operator">=</span> <span class="token variable">$reflect</span><span class="token operator">-&gt;</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$m</span> <span class="token keyword">as</span> <span class="token variable">$prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">print</span> <span class="token variable">$prop</span><span class="token operator">-&gt;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span><span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以不用反射API，使用class函数，返回对象属性的关联数组以及更多的信息：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// 返回对象属性的关联数组</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">get_object_vars</span><span class="token punctuation">(</span><span class="token variable">$student</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 类属性</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">get_class_vars</span><span class="token punctuation">(</span><span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$student</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回由类的方法名组成的数组</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">get_class_methods</span><span class="token punctuation">(</span><span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$student</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如这个对象是从其他页面传过来的，怎么知道它属于哪个类呢？</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// 获取对象属性列表所属的类</span>
<span class="token keyword">echo</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$student</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>反射API的功能显然更强大，甚至能还原这个类的原型，包括方法的访问权限等</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// 反射获取类的原型</span>
<span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionClass</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;person&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$className</span> <span class="token operator">=</span> <span class="token variable">$obj</span><span class="token operator">-&gt;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$Methods</span> <span class="token operator">=</span> <span class="token variable">$Properties</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token operator">-&gt;</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token variable">$Properties</span><span class="token punctuation">[</span><span class="token variable">$v</span><span class="token operator">-&gt;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$v</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token operator">-&gt;</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token variable">$Methods</span><span class="token punctuation">[</span><span class="token variable">$v</span><span class="token operator">-&gt;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$v</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;class <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$className</span><span class="token punctuation">}</span></span>\\n{\\n&quot;</span><span class="token punctuation">;</span>

<span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$Properties</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ksort</span><span class="token punctuation">(</span><span class="token variable">$Properties</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$Properties</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=&gt;</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;\\t&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token variable">$v</span><span class="token operator">-&gt;</span><span class="token function">isPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string single-quoted-string">&#39; public&#39;</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token variable">$v</span><span class="token operator">-&gt;</span><span class="token function">isPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string single-quoted-string">&#39; private&#39;</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span>
	<span class="token variable">$v</span><span class="token operator">-&gt;</span><span class="token function">isProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string single-quoted-string">&#39; protected&#39;</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span>
	<span class="token variable">$v</span><span class="token operator">-&gt;</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string single-quoted-string">&#39; static&#39;</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;\\t<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$k</span><span class="token punctuation">}</span></span>\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$Methods</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">ksort</span><span class="token punctuation">(</span><span class="token variable">$Methods</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$Methods</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=&gt;</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;\\tfunction <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$k</span><span class="token punctuation">}</span></span>(){}\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;}\\n&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">person</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> gender
	<span class="token keyword">public</span> name
	<span class="token keyword">function</span> <span class="token function-definition function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">function</span> <span class="token function-definition function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">function</span> <span class="token function-definition function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不仅如此，PHP手册中关于反射API更是有几十个，可以说，反射完整地描述了一个类或者对象的原型。反射不仅可以用于类和对象，还可以用于函数、扩展模块、异常等</p><h2 id="反射有什么作用" tabindex="-1"><a class="header-anchor" href="#反射有什么作用" aria-hidden="true">#</a> 反射有什么作用</h2><p>反射可以用于文档生成。因此可以用它对文件里的类进行扫描，逐个生成描述文档。 既然反射可以探知类的内部结构，那么是不是可以用它做hook实现插件功能呢？或者是做动态代理呢？</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">mysql</span>
<span class="token punctuation">{</span>
	<span class="token keyword">function</span> <span class="token function-definition function">connect</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;连接到数据库\${db[0]}\\r\\n&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">sqlproxy</span>
<span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token variable">$target</span><span class="token punctuation">;</span>  
	<span class="token keyword">function</span> <span class="token function-definition function">construct</span><span class="token punctuation">(</span><span class="token variable">$tar</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
		<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">target</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token variable">$tar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">function</span> <span class="token function-definition function">call</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">target</span> <span class="token keyword">as</span> <span class="token variable">$obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token variable">$r</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionClass</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$method</span> <span class="token operator">=</span> <span class="token variable">$r</span><span class="token operator">-&gt;</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$method</span><span class="token operator">-&gt;</span><span class="token function">isPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token variable">$method</span><span class="token operator">-&gt;</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;方法前拦截记录LOG\\r\\n&quot;</span><span class="token punctuation">;</span>
					<span class="token variable">$method</span><span class="token operator">-&gt;</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;方法后拦截\\r\\n&quot;</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">sqlproxy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;mysql&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$obj</span><span class="token operator">-&gt;</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;member&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在平常开发中，用到反射的地方不多：一个是对对象进行调试，另一个是获取类的信息。在MVC和插件开发中，使用反射很常见，但是反射的消耗也很大，在可以找到替代方案的情况下，就不要滥用。</p><p>PHP有Token函数，可以通过这个机制实现一些反射功能。从简单灵活的角度讲，使用已经提供的反射API是可取的。</p><p>很多时候，善用反射能保持代码的优雅和简洁，但反射也会破坏类的封装性，因为反射可以使本不应该暴露的方法或属性被强制暴露了出来，这既是优点也是缺点。</p>`,21),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","PHP反射详解.html.vue"]]);export{k as default};
