const e=JSON.parse('{"key":"v-f52c4b3e","path":"/interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/QA.html","title":"问题与简答","lang":"zh-CN","frontmatter":{"description":"问题与简答 设计模式篇 什么是设计模式 每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动 模式要素：模式名称、问题、解决方案、效果 如何理解框架 框架是构成一类特定软件可复用设计的一组相互协作的类。框架规定了应用的体系结构。定义了整体结构，类和对象的分隔，各部分的主要责任，类和对象怎么协作，以及控制流程。框架预定义了这些设计参数，以便于应用设计者或实现者能集中精力于应用本身的特定细节。框架记录了其应用领域的共同的设计决策。因而框架更强调设计复用，尽管框架常包括具体的立即可用的子类","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/article/docs/interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/QA.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"问题与简答"}],["meta",{"property":"og:description","content":"问题与简答 设计模式篇 什么是设计模式 每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动 模式要素：模式名称、问题、解决方案、效果 如何理解框架 框架是构成一类特定软件可复用设计的一组相互协作的类。框架规定了应用的体系结构。定义了整体结构，类和对象的分隔，各部分的主要责任，类和对象怎么协作，以及控制流程。框架预定义了这些设计参数，以便于应用设计者或实现者能集中精力于应用本身的特定细节。框架记录了其应用领域的共同的设计决策。因而框架更强调设计复用，尽管框架常包括具体的立即可用的子类"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"问题与简答\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"设计模式篇","slug":"设计模式篇","link":"#设计模式篇","children":[{"level":3,"title":"什么是设计模式","slug":"什么是设计模式","link":"#什么是设计模式","children":[]},{"level":3,"title":"如何理解框架","slug":"如何理解框架","link":"#如何理解框架","children":[]},{"level":3,"title":"主要设计模式","slug":"主要设计模式","link":"#主要设计模式","children":[]},{"level":3,"title":"怎样选择设计模式","slug":"怎样选择设计模式","link":"#怎样选择设计模式","children":[]},{"level":3,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]},{"level":3,"title":"抽象工厂模式","slug":"抽象工厂模式","link":"#抽象工厂模式","children":[]},{"level":3,"title":"工厂方法模式","slug":"工厂方法模式","link":"#工厂方法模式","children":[]},{"level":3,"title":"适配器模式","slug":"适配器模式","link":"#适配器模式","children":[]},{"level":3,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[]},{"level":3,"title":"策略模式","slug":"策略模式","link":"#策略模式","children":[]},{"level":3,"title":"OOP 思想","slug":"oop-思想","link":"#oop-思想","children":[]},{"level":3,"title":"抽象类和接口","slug":"抽象类和接口","link":"#抽象类和接口","children":[]},{"level":3,"title":"控制反转","slug":"控制反转","link":"#控制反转","children":[]},{"level":3,"title":"依赖注入","slug":"依赖注入","link":"#依赖注入","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":7.72,"words":2317},"filePathRelative":"interview/设计模式/QA.md","excerpt":"<h1> 问题与简答</h1>\\n<h2> 设计模式篇</h2>\\n<h3> 什么是设计模式</h3>\\n<p>每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动</p>\\n<p>模式要素：模式名称、问题、解决方案、效果</p>\\n<h3> 如何理解框架</h3>\\n<p>框架是构成一类特定软件可复用设计的一组相互协作的类。框架规定了应用的体系结构。定义了整体结构，类和对象的分隔，各部分的主要责任，类和对象怎么协作，以及控制流程。框架预定义了这些设计参数，以便于应用设计者或实现者能集中精力于应用本身的特定细节。框架记录了其应用领域的共同的设计决策。因而框架更强调设计复用，尽管框架常包括具体的立即可用的子类</p>","autoDesc":true}');export{e as data};
