const e=JSON.parse('{"key":"v-6e0685e8","path":"/interview/%E5%89%8D%E7%AB%AF/11.JavaScript%E6%93%8D%E4%BD%9CDOM%E5%B8%B8%E7%94%A8%E7%9A%84API.html","title":"JavaScript操作DOM常用的API","lang":"zh-CN","frontmatter":{"description":"JavaScript操作DOM常用的API 1 什么是DOM 文档对象模型 (DOM) 是HTML和XML文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。 文档对象模型 (DOM) 是对HTML文件的另一种展示，通俗地说，一个HTML 文件，我们可以用编辑器以代码的形式展示它，也可以用浏览器以页面的形式展示它，同一份文件通过不同的展示方式，就有了不一样的表现形式。而DOM 将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合。简言之，它会将web页面和脚本或程序语言连接起来，我们可以使用脚本或者程序语言通过DOM 来改变或者控制web页面。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/article/docs/interview/%E5%89%8D%E7%AB%AF/11.JavaScript%E6%93%8D%E4%BD%9CDOM%E5%B8%B8%E7%94%A8%E7%9A%84API.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"JavaScript操作DOM常用的API"}],["meta",{"property":"og:description","content":"JavaScript操作DOM常用的API 1 什么是DOM 文档对象模型 (DOM) 是HTML和XML文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。 文档对象模型 (DOM) 是对HTML文件的另一种展示，通俗地说，一个HTML 文件，我们可以用编辑器以代码的形式展示它，也可以用浏览器以页面的形式展示它，同一份文件通过不同的展示方式，就有了不一样的表现形式。而DOM 将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合。简言之，它会将web页面和脚本或程序语言连接起来，我们可以使用脚本或者程序语言通过DOM 来改变或者控制web页面。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/article/docs/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"JavaScript操作DOM常用的API"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript操作DOM常用的API\\",\\"image\\":[\\"https://mister-hope.github.io/article/docs/\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1 什么是DOM","slug":"_1-什么是dom","link":"#_1-什么是dom","children":[]},{"level":2,"title":"2 如何访问DOM","slug":"_2-如何访问dom","link":"#_2-如何访问dom","children":[]},{"level":2,"title":"3 Node","slug":"_3-node","link":"#_3-node","children":[{"level":3,"title":"3.1 Element","slug":"_3-1-element","link":"#_3-1-element","children":[]},{"level":3,"title":"3.2 Text","slug":"_3-2-text","link":"#_3-2-text","children":[]},{"level":3,"title":"3.3 Comment","slug":"_3-3-comment","link":"#_3-3-comment","children":[]},{"level":3,"title":"3.4 Document","slug":"_3-4-document","link":"#_3-4-document","children":[]},{"level":3,"title":"3.5 DocumentFragment","slug":"_3-5-documentfragment","link":"#_3-5-documentfragment","children":[]}]},{"level":2,"title":"4 节点创建型API","slug":"_4-节点创建型api","link":"#_4-节点创建型api","children":[{"level":3,"title":"4.1 createElement","slug":"_4-1-createelement","link":"#_4-1-createelement","children":[]},{"level":3,"title":"4.2 createTextNode","slug":"_4-2-createtextnode","link":"#_4-2-createtextnode","children":[]},{"level":3,"title":"4.3 cloneNode","slug":"_4-3-clonenode","link":"#_4-3-clonenode","children":[]},{"level":3,"title":"4.4 createDocumentFragment","slug":"_4-4-createdocumentfragment","link":"#_4-4-createdocumentfragment","children":[]},{"level":3,"title":"4.5 节点创建型API总结","slug":"_4-5-节点创建型api总结","link":"#_4-5-节点创建型api总结","children":[]}]},{"level":2,"title":"5 页面修改型API","slug":"_5-页面修改型api","link":"#_5-页面修改型api","children":[{"level":3,"title":"5.1 appendChild","slug":"_5-1-appendchild","link":"#_5-1-appendchild","children":[]},{"level":3,"title":"5.2 insertBefore","slug":"_5-2-insertbefore","link":"#_5-2-insertbefore","children":[]},{"level":3,"title":"5.3 removeChild","slug":"_5-3-removechild","link":"#_5-3-removechild","children":[]},{"level":3,"title":"5.4 replaceChild","slug":"_5-4-replacechild","link":"#_5-4-replacechild","children":[]},{"level":3,"title":"5.5 页面修改型API总结","slug":"_5-5-页面修改型api总结","link":"#_5-5-页面修改型api总结","children":[]}]},{"level":2,"title":"6 节点查询型API","slug":"_6-节点查询型api","link":"#_6-节点查询型api","children":[{"level":3,"title":"6.1 document.getElementById","slug":"_6-1-document-getelementbyid","link":"#_6-1-document-getelementbyid","children":[]},{"level":3,"title":"6.2 document.getElementsByTagName","slug":"_6-2-document-getelementsbytagname","link":"#_6-2-document-getelementsbytagname","children":[]},{"level":3,"title":"6.3 document.getElementsByName","slug":"_6-3-document-getelementsbyname","link":"#_6-3-document-getelementsbyname","children":[]},{"level":3,"title":"6.4 document.getElementsByClassName","slug":"_6-4-document-getelementsbyclassname","link":"#_6-4-document-getelementsbyclassname","children":[]},{"level":3,"title":"6.5 document.querySelector和document.querySelectorAll","slug":"_6-5-document-queryselector和document-queryselectorall","link":"#_6-5-document-queryselector和document-queryselectorall","children":[]}]},{"level":2,"title":"7 节点关系型API","slug":"_7-节点关系型api","link":"#_7-节点关系型api","children":[{"level":3,"title":"7.1 父关系型API","slug":"_7-1-父关系型api","link":"#_7-1-父关系型api","children":[]},{"level":3,"title":"7.2 子关系型APPI","slug":"_7-2-子关系型appi","link":"#_7-2-子关系型appi","children":[]},{"level":3,"title":"7.3 兄弟关系型API","slug":"_7-3-兄弟关系型api","link":"#_7-3-兄弟关系型api","children":[]}]},{"level":2,"title":"8 元素属性型API","slug":"_8-元素属性型api","link":"#_8-元素属性型api","children":[{"level":3,"title":"8.1 setAttribute","slug":"_8-1-setattribute","link":"#_8-1-setattribute","children":[]},{"level":3,"title":"8.2 getAttribute","slug":"_8-2-getattribute","link":"#_8-2-getattribute","children":[]},{"level":3,"title":"8.3 removeAttribute","slug":"_8-3-removeattribute","link":"#_8-3-removeattribute","children":[]}]},{"level":2,"title":"9 元素样式型API","slug":"_9-元素样式型api","link":"#_9-元素样式型api","children":[{"level":3,"title":"9.1 window.getComputedStyle","slug":"_9-1-window-getcomputedstyle","link":"#_9-1-window-getcomputedstyle","children":[]},{"level":3,"title":"9.2 getBoundingClientRect","slug":"_9-2-getboundingclientrect","link":"#_9-2-getboundingclientrect","children":[]},{"level":3,"title":"9.3 直接修改元素的样式","slug":"_9-3-直接修改元素的样式","link":"#_9-3-直接修改元素的样式","children":[]},{"level":3,"title":"9.4 动态添加样式规则","slug":"_9-4-动态添加样式规则","link":"#_9-4-动态添加样式规则","children":[]}]},{"level":2,"title":"10 总结","slug":"_10-总结","link":"#_10-总结","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":20.28,"words":6085},"filePathRelative":"interview/前端/11.JavaScript操作DOM常用的API.md","excerpt":"<h1> JavaScript操作DOM常用的API</h1>\\n<h2> 1 什么是DOM</h2>\\n<p>文档对象模型 (DOM) 是HTML和XML文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。\\n文档对象模型 (DOM) 是对HTML文件的另一种展示，通俗地说，一个HTML 文件，我们可以用编辑器以代码的形式展示它，也可以用浏览器以页面的形式展示它，同一份文件通过不同的展示方式，就有了不一样的表现形式。而DOM 将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合。简言之，它会将web页面和脚本或程序语言连接起来，我们可以使用脚本或者程序语言通过DOM 来改变或者控制web页面。</p>","autoDesc":true}');export{e as data};
