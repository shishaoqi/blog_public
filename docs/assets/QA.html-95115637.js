import{_ as p,W as r,X as d,Y as a,Z as e,$ as n,a1 as s,a2 as i,C as l}from"./framework-7d1f27fd.js";const c="/article/docs/assets/web-css-CSS选择器-6f010d7f.png",u="/article/docs/assets/web-css-CSS框模型-88d74e2a.jpg",h="/article/docs/assets/web-javascript-数据类型-c35f98a1.png",v={},E=i('<h1 id="问题与简答" tabindex="-1"><a class="header-anchor" href="#问题与简答" aria-hidden="true">#</a> 问题与简答</h1><h2 id="web-篇" tabindex="-1"><a class="header-anchor" href="#web-篇" aria-hidden="true">#</a> Web 篇</h2><h3 id="seo-有哪些需要注意的" tabindex="-1"><a class="header-anchor" href="#seo-有哪些需要注意的" aria-hidden="true">#</a> SEO 有哪些需要注意的</h3><p>合理的 title、description、keywords</p><p>语义化的 HTML 代码，符合 W3C 规范：语义化代码让搜索引擎容易理解网页</p><p>重要内容 HTML 代码放在最前：搜索引擎抓取 HTML 顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取</p><p>重要内容不要用 js 输出：爬虫不会执行 js 获取内容</p><p>少用 iframe：搜索引擎不会抓取 iframe 中的内容</p><p>非装饰性图片必须加 alt</p><p>提高网站速度：网站速度是搜索引擎排序的一个重要指标</p>',10),m=i('<h3 id="img-标签的-title-和-alt-有什么区别" tabindex="-1"><a class="header-anchor" href="#img-标签的-title-和-alt-有什么区别" aria-hidden="true">#</a> img 标签的 title 和 alt 有什么区别</h3><p>title 属性规定关于元素的额外信息，这些信息通常会在鼠标移到元素上时显示一段提示文本</p><p>alt 是<code>&lt;img&gt;</code>标签的特有属性，是图片内容的等价描述。图片无法加载时显示。搜索引擎会重点分析</p><h3 id="css-选择器的分类" tabindex="-1"><a class="header-anchor" href="#css-选择器的分类" aria-hidden="true">#</a> CSS 选择器的分类</h3><figure><img src="'+c+'" alt="CSS选择器" tabindex="0" loading="lazy"><figcaption>CSS选择器</figcaption></figure>',5),b=i('<h3 id="css-sprite-是什么-有什么优缺点" tabindex="-1"><a class="header-anchor" href="#css-sprite-是什么-有什么优缺点" aria-hidden="true">#</a> CSS sprite 是什么，有什么优缺点</h3><p>概念：将多个小图片拼接到一个图片中。通过 background-position 和元素尺寸调节需要显示的背景图案。</p><ul><li>优点</li></ul><p>减少 HTTP 请求数，极大地提高页面加载速度</p><p>增加图片信息重复度，提高压缩比，减少图片大小</p><p>更换风格方便，只需在一张或几张图片上修改颜色或样式即可实现</p><ul><li>缺点</li></ul><p>图片合并麻烦</p><p>维护麻烦，修改一个图片可能需要从新布局整个图片，样式</p>',9),k=i('<h3 id="display-none-与-visibility-hidden-的区别" tabindex="-1"><a class="header-anchor" href="#display-none-与-visibility-hidden-的区别" aria-hidden="true">#</a> display: none 与 visibility: hidden 的区别</h3><ul><li>用途</li></ul><p>通过为属性设置一个值来影响用户代理显示的方式</p><ul><li>区别</li></ul><p>display:none 会让元素完全从渲染树中消失，渲染的时候不占据任何空间；visibility: hidden 不会让元素从渲染树消失，渲染师元素继续占据空间，只是内容不可见</p><p>display: none 是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示；visibility: hidden 是继承属性，子孙节点消失由于继承了hidden，通过设置visibility: visible 可以让子孙节点显式</p><p>修改常规流中元素的 display 通常会造成文档重排。修改 visibility 属性只会造成本元素的重绘</p><p>读屏器不会读取 display: none 元素内容；会读取 visibility: hidden 元素内容</p><h3 id="display-block-和-display-inline-的区别" tabindex="-1"><a class="header-anchor" href="#display-block-和-display-inline-的区别" aria-hidden="true">#</a> display: block 和 display: inline 的区别</h3><ul><li>block 元素特点</li></ul><p>处于常规流中时，如果 width 没有设置，会自动填充满父容器</p><p>可以应用 margin/padding</p><p>在没有设置高度的情况下会扩展高度以包含常规流中的子元素</p><p>处于常规流中时布局时在前后元素位置之间（独占一个水平空间）</p><p>忽略 vertical-align</p><ul><li>inline 元素特点</li></ul><p>水平方向上根据 direction 依次布局</p><p>不会在元素前后进行换行</p><p>受 white-space 控制</p><p>margin/padding 在竖直方向上无效，水平方向上有效</p><p>width/height 属性对非替换行内元素无效，宽度由元素内容决定</p><p>非替换行内元素的行框高由 line-height 确定，替换行内元素的行框高由 height,margin,padding,border 决定</p><p>浮动或绝对定位时会转换为 block</p><p>vertical-align 属性生效</p><h3 id="css-文件、style-标签、行内-style-属性优先级" tabindex="-1"><a class="header-anchor" href="#css-文件、style-标签、行内-style-属性优先级" aria-hidden="true">#</a> CSS 文件、style 标签、行内 style 属性优先级</h3><p>最近的祖先样式比其他祖先样式优先级高</p><p>&quot;直接样式&quot;比&quot;祖先样式&quot;优先级高</p><h3 id="link-与-import-的区别" tabindex="-1"><a class="header-anchor" href="#link-与-import-的区别" aria-hidden="true">#</a> link 与 @import 的区别</h3><p>link 是 HTML 方式， @import 是 CSS 方式</p><p>link 最大限度支持并行下载，@import 过多嵌套导致串行下载，出现FOUC</p><p>link 可以通过 rel=&quot;alternate stylesheet&quot;指定候选样式</p><p>浏览器对 link 支持早于 @import，可以使用 @import 对老浏览器隐藏样式</p>',32),f=a("p",null,"总体来说：link 优于 @import",-1),_=a("h3",{id:"盒子模型",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#盒子模型","aria-hidden":"true"},"#"),e(" 盒子模型")],-1),g=a("figure",null,[a("img",{src:u,alt:"CSS框模型",tabindex:"0",loading:"lazy"}),a("figcaption",null,"CSS框模型")],-1),A=a("p",null,"具备属性：内容(content)、填充(padding)、边框(border)、边界(margin)",-1),x=i(`<h3 id="容器包含若干浮动元素时如何清理-包含-浮动" tabindex="-1"><a class="header-anchor" href="#容器包含若干浮动元素时如何清理-包含-浮动" aria-hidden="true">#</a> 容器包含若干浮动元素时如何清理(包含)浮动</h3><p>容器元素闭合标签前添加额外元素并设置clear: both</p><p>父元素触发块级格式化上下文(见块级可视化上下文部分)</p><p>设置容器元素伪元素进行清理推荐的清理浮动方法</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>/**
* 在标准浏览器下使用
* 1 content内容为空格用于修复opera下文档中出现
*   contenteditable属性时在清理浮动元素上下的空白
* 2 使用display使用table而不是block：可以防止容器和
*   子元素top-margin折叠,这样能使清理效果与BFC，IE6/7
*   zoom: 1;一致
**/
.clearfix:before,
.clearfix:after {
    content: &quot; &quot;; /* 1 */
    display: table; /* 2 */
}
.clearfix:after {
    clear: both;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何水平居中一个元素" tabindex="-1"><a class="header-anchor" href="#如何水平居中一个元素" aria-hidden="true">#</a> 如何水平居中一个元素</h3><p>被设置元素为文本、图片等行内元素时，水平居中是通过给父元素设置 text-align:center 来实现的</p><p>定宽和块状可以通过设置 “左右margin” 值为 “auto” 实现居中</p><p>不定宽块状使用 float:left 实现居中</p>`,9),S=a("h3",{id:"如何竖直居中一个元素",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#如何竖直居中一个元素","aria-hidden":"true"},"#"),e(" 如何竖直居中一个元素")],-1),B=a("p",null,"父元素高度确定的单行文本",-1),y=a("p",null,"父元素高度确定的多行文本",-1),C=a("h3",{id:"flex-与-css-盒子模型有什么区别",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#flex-与-css-盒子模型有什么区别","aria-hidden":"true"},"#"),e(" flex 与 CSS 盒子模型有什么区别")],-1),j=a("p",null,"布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现",-1),w=a("p",null,"Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能",-1),q=i('<h3 id="position-属性" tabindex="-1"><a class="header-anchor" href="#position-属性" aria-hidden="true">#</a> Position 属性</h3><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>absolute</td><td>生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 &quot;left&quot;, &quot;top&quot;, &quot;right&quot; 以及 &quot;bottom&quot; 属性进行规定</td></tr><tr><td>fixed</td><td>生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 &quot;left&quot;, &quot;top&quot;, &quot;right&quot; 以及 &quot;bottom&quot; 属性进行规定</td></tr><tr><td>relative</td><td>生成相对定位的元素，相对于其正常位置进行定位。因此，&quot;left:20&quot; 会向元素的 LEFT 位置添加 20 像素</td></tr><tr><td>static</td><td>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 position 属性的值</td></tr></tbody></table>',2),D=i('<h3 id="png-gif-jpg-的区别及如何选" tabindex="-1"><a class="header-anchor" href="#png-gif-jpg-的区别及如何选" aria-hidden="true">#</a> PNG,GIF,JPG 的区别及如何选</h3><ul><li>GIF</li></ul><p>8位像素，256色；无损压缩；支持简单动画；支持boolean透明；适合简单动画</p><ul><li>JPEG</li></ul><p>颜色限于256；有损压缩；可控制压缩质量；不支持透明；适合照片</p><ul><li>PNG</li></ul><p>有PNG8和truecolor PNG；PNG8类似GIF颜色上限为256，文件小，支持alpha透明度，无动画；适合图标、背景、按钮</p><h3 id="为什么把-javascript-文件放在-html-底部" tabindex="-1"><a class="header-anchor" href="#为什么把-javascript-文件放在-html-底部" aria-hidden="true">#</a> 为什么把 JavaScript 文件放在 Html 底部</h3><p>脚本会阻塞页面其他资源的下载，因此推荐将所有<code>&lt;script&gt;</code>标签尽可能放到<code>&lt;body&gt;</code>标签的底部，以尽量减少对整个页面下载的影响</p>',9),F=a("h3",{id:"javascript-数据类型",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#javascript-数据类型","aria-hidden":"true"},"#"),e(" JavaScript 数据类型")],-1),J=a("figure",null,[a("img",{src:h,alt:"JavaScript 数据类型",tabindex:"0",loading:"lazy"}),a("figcaption",null,"JavaScript 数据类型")],-1),M=a("h3",{id:"javascript-操作-dom-的方法有哪些",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#javascript-操作-dom-的方法有哪些","aria-hidden":"true"},"#"),e(" JavaScript 操作 DOM 的方法有哪些")],-1),N=a("p",null,"获取节点的方法getElementById、getElementsByClassName、getElementsByTagName、 getElementsByName、querySelector、querySelectorAll,对元素属性进行操作的 getAttribute、 setAttribute、removeAttribute方法，对节点进行增删改的appendChild、insertBefore、replaceChild、removeChild、 createElement等",-1),P=i(`<h3 id="javascript-字符串方法有哪些" tabindex="-1"><a class="header-anchor" href="#javascript-字符串方法有哪些" aria-hidden="true">#</a> JavaScript 字符串方法有哪些</h3><p>简单分为获取类方法，获取类方法有charAt方法用来获取指定位置的字符，获取指定位置字符的unicode编码的charCodeAt方法， 与之相反的fromCharCode方法，通过传入的unicode返回字符串。查找类方法有indexof()、lastIndexOf()、search()、match() 方法。截取类的方法有substring、slice、substr三个方法，其他的还有replace、split、toLowerCase、toUpperCase方法</p><h3 id="javascript-字符串截取方法有哪些-有什么区别" tabindex="-1"><a class="header-anchor" href="#javascript-字符串截取方法有哪些-有什么区别" aria-hidden="true">#</a> JavaScript 字符串截取方法有哪些？有什么区别</h3><p>js字符串截取方法有substring、slice、substr三个方法，substring和slice都是指定截取的首尾索引值，不同的是传递负值的时候 substring会当做0来处理，而slice传入负值的规则是-1指最后一个字符，substr方法则是第一个参数是开始截取的字符串，第二个是截取的字符数量， 和slice类似，传入负值也是从尾部算起的</p><h3 id="settimeout-和-setinterval-的区别" tabindex="-1"><a class="header-anchor" href="#settimeout-和-setinterval-的区别" aria-hidden="true">#</a> setTimeout 和 setInterval 的区别</h3><p>setTimeout表示间隔一段时间之后执行一次调用，而setInterval则是每间隔一段时间循环调用，直至clearInterval结束。 内存方面，setTimeout只需要进入一次队列，不会造成内存溢出，setInterval因为不计算代码执行时间，有可能同时执行多次代码， 导致内存溢出</p><h3 id="使用-new-操作符实例化一个对象的具体步骤" tabindex="-1"><a class="header-anchor" href="#使用-new-操作符实例化一个对象的具体步骤" aria-hidden="true">#</a> 使用 new 操作符实例化一个对象的具体步骤</h3><ul><li><p>构造一个新的对象</p></li><li><p>将构造函数的作用域赋给新对象（也就是说this指向了新的对象）</p></li><li><p>执行构造函数中的代码</p></li><li><p>返回新对象</p></li></ul><h3 id="如何实现-ajax-请求" tabindex="-1"><a class="header-anchor" href="#如何实现-ajax-请求" aria-hidden="true">#</a> 如何实现 ajax 请求</h3><p>通过实例化一个XMLHttpRequest对象得到一个实例，调用实例的open方法为这次 ajax请求设定相应的http方法、相应的地址和以及是否异步，当然大多数情况下我们都是选异步， 以异步为例，之后调用send方法ajax请求，这个方法可以设定需要发送的报文主体，然后通过 监听readystatechange事件，通过这个实例的readyState属性来判断这个ajax请求的状态，其中分为0,1,2,3,4这四种 状态，当状态为4的时候也就是接收数据完成的时候，这时候可以通过实例的status属性判断这个请求是否成功</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;aabb.php&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="同源策略是什么" tabindex="-1"><a class="header-anchor" href="#同源策略是什么" aria-hidden="true">#</a> 同源策略是什么</h3><p>同源策略是指只有具有相同源的页面才能够共享数据，比如cookie，同源是指页面具有相同的协议、域名、端口号，有一项不同就不是同源。 有同源策略能够保证web网页的安全性</p>`,13),I=a("h3",{id:"如何解决跨域问题",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#如何解决跨域问题","aria-hidden":"true"},"#"),e(" 如何解决跨域问题")],-1),L=a("li",null,"通过 JSONP 跨域",-1),T=a("li",null,"document.domain + iframe 跨域",-1),O=a("li",null,"location.hash + iframe",-1),G={href:"http://window.name",target:"_blank",rel:"noopener noreferrer"},H=a("li",null,"postMessage 跨域",-1),V=a("li",null,"跨域资源共享（CORS）",-1),W=a("li",null,"nginx 代理跨域",-1),R=a("li",null,"nodejs 中间件代理跨域",-1),z=a("li",null,"WebSocket 协议跨域",-1),$=i('<h3 id="引起内存泄漏的操作有哪些" tabindex="-1"><a class="header-anchor" href="#引起内存泄漏的操作有哪些" aria-hidden="true">#</a> 引起内存泄漏的操作有哪些</h3><ul><li><p>全局变量引起</p></li><li><p>闭包引起</p></li><li><p>dom清空，事件未清除</p></li><li><p>子元素存在引用</p></li><li><p>被遗忘的计时器</p></li></ul><h3 id="闭包理解及应用" tabindex="-1"><a class="header-anchor" href="#闭包理解及应用" aria-hidden="true">#</a> 闭包理解及应用</h3><p>闭包是函数和声明该函数的词法环境的组合</p><p>应用</p><ul><li><p>定义事件行为</p></li><li><p>模拟私有方法，用于定义公共函数</p></li></ul>',6),U=i('<h3 id="对-javascript-原型的理解" tabindex="-1"><a class="header-anchor" href="#对-javascript-原型的理解" aria-hidden="true">#</a> 对 JavaScript 原型的理解</h3><p>我们知道在es6之前，js没有类和继承的概念，js是通过原型来实现继承的。在js中一个构造函数默认自带有一个prototype属性， 这个的属性值是一个对象，同时这个prototype对象自带有一个constructor属性，这个属性指向这个构造函数，同时每一个实例 都有一个__proto__属性指向这个prototype对象，我们可以将这个叫做隐式原型，我们在使用一个实例的方法的时候，会先检查 这个实例中是否有这个方法，没有则会继续向上查找这个prototype对象是否有这个方法，刚刚我们说到prototype是一个对象， 那么也即是说这个是一个对象的实例，那么这个对象同样也会有一个__proto__属性指向对象的prototype对象</p><h3 id="对-javascript-模块化的理解" tabindex="-1"><a class="header-anchor" href="#对-javascript-模块化的理解" aria-hidden="true">#</a> 对 JavaScript 模块化的理解</h3><p>在ES6出现之前，js没有标准的模块化概念，这也就造成了js多人写作开发容易造成全局污染的情况，以前我们可能会采用立即执行 函数、对象等方式来尽量减少变量这种情况，后面社区为了解决这个问题陆续提出了AMD规范和CMD规范，这里不同于Node.js的 CommonJS的原因在于服务端所有的模块都是存在于硬盘中的，加载和读取几乎是不需要时间的，而浏览器端因为加载速度取决于网速， 因此需要采用异步加载，AMD规范中使用define来定义一个模块，使用require方法来加载一个模块，现在ES6也推出了标准的模块 加载方案，通过export和import来导出和导入模块。</p><h3 id="如何判断网页中图片加载成功或者失败" tabindex="-1"><a class="header-anchor" href="#如何判断网页中图片加载成功或者失败" aria-hidden="true">#</a> 如何判断网页中图片加载成功或者失败</h3><p>使用onload事件运行加载成功，使用onerror事件判断失败</p><h3 id="如何实现懒加载" tabindex="-1"><a class="header-anchor" href="#如何实现懒加载" aria-hidden="true">#</a> 如何实现懒加载</h3><p>懒加载就是根据用户的浏览需要记载内容，也就是在用户即将浏览完当前的内容时进行继续加载内容，这种技术常常用来加载图片的时候使用。我们判断用户是否即将浏览到底部之后进行在家内容 这时候可能会需要加载大量的内容，可以使用fragment来优化一下，因为大部分是使用滑动和滚轮来触发的，因此很有可能会不断触发，可以使用函数节流做一个优化，防止用户不断触发</p><h3 id="jsonp-原理" tabindex="-1"><a class="header-anchor" href="#jsonp-原理" aria-hidden="true">#</a> JSONP 原理</h3><p>创建一个回调函数，然后在远程服务上调用这个函数并且将 JSON 数据形式作为参数传递，完成回调</p>',10),X=i(`<h3 id="cookie-读写" tabindex="-1"><a class="header-anchor" href="#cookie-读写" aria-hidden="true">#</a> Cookie 读写</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;name=oeschger&quot;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;favorite_food=tripe&quot;</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 显示: name=oeschger;favorite_food=tripe</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;test1=Hello&quot;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;test2=World&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> myCookie <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:(?:^|.*;\\s*)test2\\s*\\=\\s*([^;]*).*$)|^.*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;$1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>myCookie<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 显示: World</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="渐进增强" tabindex="-1"><a class="header-anchor" href="#渐进增强" aria-hidden="true">#</a> 渐进增强</h3><p>渐进增强(英语：Progressive enhancement)是网页设计的一种策略，强调可访问性，语义 HTML 标记，外部样式表和脚本技术。渐进增强使用 Web 技术以分层的方式，允许所有人访问网页的基本内容和功能，使用任何浏览器或互联网连接，同时还给更先进的浏览器软件或更大的带宽提供了这些页面的一个增强版本</p><p>核心原则</p><ul><li><p>基本内容应该是被所有网络浏览器访问</p></li><li><p>基本功能应该是被所有网络浏览器访问</p></li><li><p>稀疏的，语义化的标记包含的所有内容</p></li><li><p>增强的布局是由外部链接的 CSS 提供</p></li><li><p>增强的行为是由外部链接的非侵入式 JavaScript 提供</p></li><li><p>最终用户的网络浏览器偏好被受到尊重</p></li></ul><h3 id="从浏览器地址栏输入-url-到显示页面的步骤" tabindex="-1"><a class="header-anchor" href="#从浏览器地址栏输入-url-到显示页面的步骤" aria-hidden="true">#</a> 从浏览器地址栏输入 URL 到显示页面的步骤</h3><h3 id="vue-js-双向绑定原理" tabindex="-1"><a class="header-anchor" href="#vue-js-双向绑定原理" aria-hidden="true">#</a> Vue.js 双向绑定原理</h3>`,9),Q=i('<h3 id="如何进行网站性能优化" tabindex="-1"><a class="header-anchor" href="#如何进行网站性能优化" aria-hidden="true">#</a> 如何进行网站性能优化</h3><h3 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h3><p>浏览器单域名并发数限制、静态资源缓存 304 （If-Modified-Since 以及 Etag 原理）、多个小图标合并使用 position 定位技术 减少请求、静态资源合为单次请求 并压缩、CDN、静态资源延迟加载技术、预加载技术、keep-alive、CSS 在头部，JS 在尾部的优化（原理）</p><h3 id="新技术-了解" tabindex="-1"><a class="header-anchor" href="#新技术-了解" aria-hidden="true">#</a> 新技术（了解）</h3><p>ES6、模块化、打包、构建工具、vue、react、webpack、前端 MVVM</p><h3 id="简要介绍-es6" tabindex="-1"><a class="header-anchor" href="#简要介绍-es6" aria-hidden="true">#</a> 简要介绍 ES6</h3>',6);function Y(Z,K){const t=l("RouterLink"),o=l("ExternalLinkIcon");return r(),d("div",null,[E,a("p",null,[e("拓展阅读"),n(t,{to:"/interview/%E5%89%8D%E7%AB%AF/01.%E5%88%9D%E6%8E%A2SEO.html"},{default:s(()=>[e("《初探 SEO》")]),_:1})]),m,a("p",null,[e("拓展阅读"),n(t,{to:"/interview/%E5%89%8D%E7%AB%AF/02.CSS%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB.html"},{default:s(()=>[e("《CSS选择器的分类》")]),_:1})]),b,a("p",null,[e("拓展阅读"),n(t,{to:"/interview/%E5%89%8D%E7%AB%AF/03.CSS-Sprite%E7%9A%84%E5%BA%94%E7%94%A8.html"},{default:s(()=>[e("《雪碧图CSS Sprite的应用》")]),_:1})]),k,a("template",null,[f,_,g,A,a("p",null,[e("拓展阅读"),n(t,{to:"/interview/%E5%89%8D%E7%AB%AF/04.CSS%E7%9B%92%E6%A8%A1%E5%9E%8B.html"},{default:s(()=>[e("《CSS盒模型》")]),_:1})]),x,a("p",null,[e("拓展阅读"),n(t,{to:"/interview/%E5%89%8D%E7%AB%AF/05.CSS%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E8%AE%BE%E7%BD%AE.html"},{default:s(()=>[e("《CSS 水平居中设置》")]),_:1})]),S,B,y,a("p",null,[e("拓展阅读"),n(t,{to:"/interview/%E5%89%8D%E7%AB%AF/06.CSS%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E8%AE%BE%E7%BD%AE.html"},{default:s(()=>[e("《CSS 垂直居中设置》")]),_:1})]),C,j,w,a("p",null,[e("拓展阅读 "),n(t,{to:"/interview/%E5%89%8D%E7%AB%AF/07.flex%E5%B8%83%E5%B1%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html"},{default:s(()=>[e("《flex 布局的基本概念》")]),_:1})]),q,a("p",null,[e("拓展阅读 "),n(t,{to:"/interview/%E5%89%8D%E7%AB%AF/08.CSS-Position%E5%AD%A6%E4%B9%A0.html"},{default:s(()=>[e("《CSS Position学习》")]),_:1})]),D,a("p",null,[e("拓展阅读 "),n(t,{to:"/interview/%E5%89%8D%E7%AB%AF/09.JavaScript%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%8A%A0%E8%BD%BD%E5%92%8C%E6%89%A7%E8%A1%8C.html"},{default:s(()=>[e("《JavaScript 的性能优化：加载和执行》")]),_:1})]),F,J,a("p",null,[e("拓展阅读 "),n(t,{to:"/interview/%E5%89%8D%E7%AB%AF/10.JavaScript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html"},{default:s(()=>[e("《JavaScript 数据类型和数据结构》")]),_:1})]),M,N,a("p",null,[e("拓展阅读 "),n(t,{to:"/interview/%E5%89%8D%E7%AB%AF/11.JavaScript%E6%93%8D%E4%BD%9CDOM%E5%B8%B8%E7%94%A8%E7%9A%84API.html"},{default:s(()=>[e("《JavaScript操作DOM常用的API》")]),_:1})]),P,a("p",null,[e("拓展阅读 "),n(t,{to:"/interview/%E5%89%8D%E7%AB%AF/12.%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5.html"},{default:s(()=>[e("《浏览器的同源策略》")]),_:1})]),I,a("ul",null,[L,T,O,a("li",null,[a("a",G,[e("window.name"),n(o)]),e(" + iframe 跨域")]),H,V,W,R,z]),a("p",null,[e("拓展阅读 "),n(t,{to:"/interview/%E5%89%8D%E7%AB%AF/13.%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"},{default:s(()=>[e("《前端常见跨域解决方案》")]),_:1})]),$,a("p",null,[e("拓展阅读 "),n(t,{to:"/interview/%E5%89%8D%E7%AB%AF/14.JavaScript%E9%97%AD%E5%8C%85.html"},{default:s(()=>[e("《JavaScript闭包》")]),_:1})]),U,a("p",null,[e("拓展阅读 "),n(t,{to:"/interview/%E5%89%8D%E7%AB%AF/15.jsonp%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0.html"},{default:s(()=>[e("《jsonp的原理与简单实现》")]),_:1})]),X,a("p",null,[e("拓展阅读 "),n(t,{to:"/interview/%E5%89%8D%E7%AB%AF/16.vue%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0.html"},{default:s(()=>[e("《vue的双向绑定原理及实现》")]),_:1})]),Q])])}const ea=p(v,[["render",Y],["__file","QA.html.vue"]]);export{ea as default};
