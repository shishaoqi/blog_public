import{_ as r,W as t,X as a,a2 as p}from"./framework-7d1f27fd.js";const e={},d=p('<h1 id="php-数组" tabindex="-1"><a class="header-anchor" href="#php-数组" aria-hidden="true">#</a> PHP 数组</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>这些函数允许你通过不同的方式来使用和操作数组。数组是存储、管理和操作变量组的必不可少的工具。</p><p>PHP 支持简单数组和多维数组，数组可由用户自己创建也可以由其它函数创建。有很多特殊的数据库处理函数可以从数据库查询中返回数组以及一些返回数组的函数。</p><h2 id="预定义常量" tabindex="-1"><a class="header-anchor" href="#预定义常量" aria-hidden="true">#</a> 预定义常量</h2><p>下列常量作为 PHP 核心的一部分总是可用的。</p><p>CASE_LOWER (integer)</p><blockquote><p>CASE_LOWER 用在 array_change_key_case() 中将数组的键名转换成小写字母。这也是 array_change_key_case() 的默认值。</p></blockquote><p>CASE_UPPER (integer)</p><blockquote><p>CASE_UPPER 用在 array_change_key_case() 中将数组的键名转换成大写字母。 排序顺序标识：</p></blockquote><p>SORT_ASC (integer)</p><blockquote><p>SORT_ASC 用在 array_multisort() 函数中，使其升序排列。</p></blockquote><p>SORT_DESC (integer)</p><blockquote><p>SORT_DESC 用在 array_multisort() 函数中，使其降序排列。</p></blockquote><ul><li>排序类型标识：用于各种排序函数</li></ul><p>SORT_REGULAR (integer)</p><blockquote><p>SORT_REGULAR 用于对对象进行通常比较。</p></blockquote><p>SORT_NUMERIC (integer)</p><blockquote><p>SORT_NUMERIC 用于对对象进行数值比较。</p></blockquote><p>SORT_STRING (integer)</p><blockquote><p>SORT_STRING 用于对对象进行字符串比较。</p></blockquote><p>SORT_LOCALE_STRING (integer)</p><blockquote><p>SORT_LOCALE_STRING 基于当前区域来对对象进行字符串比较。PHP 4.4.0 和 5.0.2 新加。</p></blockquote><p>COUNT_NORMAL (integer)</p><p>COUNT_RECURSIVE (integer)</p><p>EXTR_OVERWRITE (integer)</p><p>EXTR_SKIP (integer)</p><p>EXTR_PREFIX_SAME (integer)</p><p>EXTR_PREFIX_ALL (integer)</p><p>EXTR_PREFIX_INVALID (integer)</p><p>EXTR_PREFIX_IF_EXISTS (integer)</p><p>EXTR_IF_EXISTS (integer)</p><p>EXTR_REFS (integer)</p><h2 id="对数组进行排序" tabindex="-1"><a class="header-anchor" href="#对数组进行排序" aria-hidden="true">#</a> 对数组进行排序</h2><p>PHP 有一些用来排序数组的函数</p><p>主要区别有：</p><ul><li>有些函数基于 array 的键来排序， 而其他的基于值来排序的：$array[&#39;key&#39;] = &#39;value&#39;;。</li><li>排序之后键和值之间的关联关系是否能够保持， 是指排序之后数组的键可能 会被重置为数字型的（0,1,2 ...）。</li><li>排序的顺序有：字母表顺序， 由低到高（升序）， 由高到低（降序），数字排序，自然排序，随机顺序或者用户自定义排序。</li><li>注意：下列的所有排序函数都是直接作用于数组本身， 而不是返回一个新的有序的数组。</li><li>以下函数对于数组中相等的元素，它们在排序后的顺序是未定义的。 （也即相等元素之间的顺序是不稳定的）。</li></ul><table><thead><tr><th>函数名称</th><th>排序依据</th><th>数组索引健保持</th><th>排序的顺序</th><th>相关函数</th></tr></thead><tbody><tr><td>array_multisort()</td><td>值</td><td>键值关联的保持，数字类型的不保持</td><td>第一个数组或者由选项指定</td><td>array_walk()</td></tr><tr><td>asort()</td><td>值</td><td>是</td><td>由低到高</td><td>arsort()</td></tr><tr><td>arsort()</td><td>值</td><td>是</td><td>由高到低</td><td>asort()</td></tr><tr><td>krsort()</td><td>键</td><td>是</td><td>由高到低</td><td>ksort()</td></tr><tr><td>ksort()</td><td>键</td><td>是</td><td>由低到高</td><td>asort()</td></tr><tr><td>natcasesort()</td><td>值</td><td>是</td><td>自然排序，大小写不敏感</td><td>natsort()</td></tr><tr><td>natsort()</td><td>值</td><td>是</td><td>自然排序</td><td>natcasesort()</td></tr><tr><td>rsort()</td><td>值</td><td>否</td><td>由高到低</td><td>sort()</td></tr><tr><td>shuffle()</td><td>值</td><td>否</td><td>随机</td><td>array_rand()</td></tr><tr><td>sort()</td><td>值</td><td>否</td><td>由低到高</td><td>rsort()</td></tr><tr><td>uasort()</td><td>值</td><td>是</td><td>由用户定义</td><td>uksort()</td></tr><tr><td>uksort()</td><td>键</td><td>是</td><td>由用户定义</td><td>uasort()</td></tr><tr><td>usort()</td><td>值</td><td>否</td><td>由用户定义</td><td>uasort()</td></tr></tbody></table><h2 id="数组函数" tabindex="-1"><a class="header-anchor" href="#数组函数" aria-hidden="true">#</a> 数组函数</h2><p>array_change_key_case — 将数组中的所有键名修改为全大写或小写</p><p>array_chunk — 将一个数组分割成多个</p><p>array_column — 返回数组中指定的一列</p><p>array_combine — 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</p><p>array_count_values — 统计数组中所有的值</p><p>array_diff_assoc — 带索引检查计算数组的差集</p><p>array_diff_key — 使用键名比较计算数组的差集</p><p>array_diff_uassoc — 用用户提供的回调函数做索引检查来计算数组的差集</p><p>array_diff_ukey — 用回调函数对键名比较计算数组的差集</p><p>array_diff — 计算数组的差集</p><p>array_fill_keys — 使用指定的键和值填充数组</p><p>array_fill — 用给定的值填充数组</p><p>array_filter — 用回调函数过滤数组中的单元</p><p>array_flip — 交换数组中的键和值</p><p>array_intersect_assoc — 带索引检查计算数组的交集</p><p>array_intersect_key — 使用键名比较计算数组的交集</p><p>array_intersect_uassoc — 带索引检查计算数组的交集，用回调函数比较索引</p><p>array_intersect_ukey — 用回调函数比较键名来计算数组的交集</p><p>array_intersect — 计算数组的交集</p><p>array_key_exists — 检查数组里是否有指定的键名或索引</p><p>array_key_first — Gets the first key of an array</p><p>array_key_last — Gets the last key of an array</p><p>array_keys — 返回数组中部分的或所有的键名</p><p>array_map — 为数组的每个元素应用回调函数</p><p>array_merge_recursive — 递归地合并一个或多个数组</p><p>array_merge — 合并一个或多个数组</p><p>array_multisort — 对多个数组或多维数组进行排序</p><p>array_pad — 以指定长度将一个值填充进数组</p><p>array_pop — 弹出数组最后一个单元（出栈）</p><p>array_product — 计算数组中所有值的乘积</p><p>array_push — 将一个或多个单元压入数组的末尾（入栈）</p><p>array_rand — 从数组中随机取出一个或多个单元</p><p>array_reduce — 用回调函数迭代地将数组简化为单一的值</p><p>array_replace_recursive — 使用传递的数组递归替换第一个数组的元素</p><p>array_replace — 使用传递的数组替换第一个数组的元素</p><p>array_reverse — 返回单元顺序相反的数组</p><p>array_search — 在数组中搜索给定的值，如果成功则返回首个相应的键名</p><p>array_shift — 将数组开头的单元移出数组</p><p>array_slice — 从数组中取出一段</p><p>array_splice — 去掉数组中的某一部分并用其它值取代</p><p>array_sum — 对数组中所有值求和</p><p>array_udiff_assoc — 带索引检查计算数组的差集，用回调函数比较数据</p><p>array_udiff_uassoc — 带索引检查计算数组的差集，用回调函数比较数据和索引</p><p>array_udiff — 用回调函数比较数据来计算数组的差集</p><p>array_uintersect_assoc — 带索引检查计算数组的交集，用回调函数比较数据</p><p>array_uintersect_uassoc — 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</p><p>array_uintersect — 计算数组的交集，用回调函数比较数据</p><p>array_unique — 移除数组中重复的值</p><p>array_unshift — 在数组开头插入一个或多个单元</p><p>array_values — 返回数组中所有的值</p><p>array_walk_recursive — 对数组中的每个成员递归地应用用户函数</p><p>array_walk — 使用用户自定义函数对数组中的每个元素做回调处理</p><p>array — 新建一个数组</p><p>arsort — 对数组进行逆向排序并保持索引关系</p><p>asort — 对数组进行排序并保持索引关系</p><p>compact — 建立一个数组，包括变量名和它们的值</p><p>count — 计算数组中的单元数目，或对象中的属性个数</p><p>current — 返回数组中的当前单元</p><p>each — 返回数组中当前的键／值对并将数组指针向前移动一步</p><p>end — 将数组的内部指针指向最后一个单元</p><p>extract — 从数组中将变量导入到当前的符号表</p><p>in_array — 检查数组中是否存在某个值</p><p>key_exists — 别名 array_key_exists</p><p>key — 从关联数组中取得键名</p><p>krsort — 对数组按照键名逆向排序</p><p>ksort — 对数组按照键名排序</p><p>list — 把数组中的值赋给一组变量</p><p>natcasesort — 用“自然排序”算法对数组进行不区分大小写字母的排序</p><p>natsort — 用“自然排序”算法对数组排序</p><p>next — 将数组中的内部指针向前移动一位</p><p>pos — current 的别名</p><p>prev — 将数组的内部指针倒回一位</p><p>range — 根据范围创建数组，包含指定的元素</p><p>reset — 将数组的内部指针指向第一个单元</p><p>rsort — 对数组逆向排序</p><p>shuffle — 打乱数组</p><p>sizeof — count 的别名</p><p>sort — 对数组排序</p><p>uasort — 使用用户自定义的比较函数对数组中的值进行排序并保持索引关联</p><p>uksort — 使用用户自定义的比较函数对数组中的键名进行排序</p><p>usort — 使用用户自定义的比较函数对数组中的值进行排序</p><h2 id="说明、对比与举例" tabindex="-1"><a class="header-anchor" href="#说明、对比与举例" aria-hidden="true">#</a> 说明、对比与举例</h2><h3 id="array-merge、-、array-merge-recursive-函数的区别" tabindex="-1"><a class="header-anchor" href="#array-merge、-、array-merge-recursive-函数的区别" aria-hidden="true">#</a> array_merge、+ 、array_merge_recursive 函数的区别</h3>',122),_=[d];function s(o,i){return t(),a("div",null,_)}const y=r(e,[["render",s],["__file","PHP数组.html.vue"]]);export{y as default};
