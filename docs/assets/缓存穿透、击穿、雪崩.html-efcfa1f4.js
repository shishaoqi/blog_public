const t=JSON.parse('{"key":"v-6c3bdd93","path":"/interview/Redis/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E5%87%BB%E7%A9%BF%E3%80%81%E9%9B%AA%E5%B4%A9.html","title":"缓存穿透、击穿、雪崩","lang":"zh-CN","frontmatter":{"description":"缓存穿透、击穿、雪崩 穿透 缓存穿透是指：缓存和数据库都没有的数据，被大量请求，比如订单号不可能为-1，但是用户请求了大量订单号为-1的数据，由于数据不存在，缓存就也不会存在该数据，所有的请求都会直接穿透到数据库。 如果被恶意用户利用，疯狂请求不存在的数据，就会导致数据库压力过大，甚至垮掉。 注意：穿透的意思是，都没有，直接一路打到数据库。 缓存穿透的解决方案 接口增加业务层级的Filter，进行合法校验，这可以有效拦截大部分不合法的请求。 作为第一点的补充，最常见的是使用布隆过滤器，针对一个或者多个维度，把可能存在的数据值hash到bitmap中，bitmap证明该数据不存在则该数据一定不存在，但是bitmap证明该数据存在也只能是可能存在，因为不同的数值hash到的bit位很有可能是一样的，hash冲突会导致误判，多个hash方法也只能是降低冲突的概率，无法做到避免。 另外一个常见的方法，则是针对数据库与缓存都没有的数据，对空的结果进行缓存，但是过期时间设置得较短，一般五分钟内。而这种数据，如果数据库有写入，或者更新，必须同时刷新缓存，否则会导致不一致的问题存在。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/article/docs/interview/Redis/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E5%87%BB%E7%A9%BF%E3%80%81%E9%9B%AA%E5%B4%A9.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"缓存穿透、击穿、雪崩"}],["meta",{"property":"og:description","content":"缓存穿透、击穿、雪崩 穿透 缓存穿透是指：缓存和数据库都没有的数据，被大量请求，比如订单号不可能为-1，但是用户请求了大量订单号为-1的数据，由于数据不存在，缓存就也不会存在该数据，所有的请求都会直接穿透到数据库。 如果被恶意用户利用，疯狂请求不存在的数据，就会导致数据库压力过大，甚至垮掉。 注意：穿透的意思是，都没有，直接一路打到数据库。 缓存穿透的解决方案 接口增加业务层级的Filter，进行合法校验，这可以有效拦截大部分不合法的请求。 作为第一点的补充，最常见的是使用布隆过滤器，针对一个或者多个维度，把可能存在的数据值hash到bitmap中，bitmap证明该数据不存在则该数据一定不存在，但是bitmap证明该数据存在也只能是可能存在，因为不同的数值hash到的bit位很有可能是一样的，hash冲突会导致误判，多个hash方法也只能是降低冲突的概率，无法做到避免。 另外一个常见的方法，则是针对数据库与缓存都没有的数据，对空的结果进行缓存，但是过期时间设置得较短，一般五分钟内。而这种数据，如果数据库有写入，或者更新，必须同时刷新缓存，否则会导致不一致的问题存在。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"缓存穿透、击穿、雪崩\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"穿透","slug":"穿透","link":"#穿透","children":[]},{"level":2,"title":"击穿","slug":"击穿","link":"#击穿","children":[]},{"level":2,"title":"雪崩","slug":"雪崩","link":"#雪崩","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.33,"words":1000},"filePathRelative":"interview/Redis/缓存穿透、击穿、雪崩.md","excerpt":"<h1> 缓存穿透、击穿、雪崩</h1>\\n<h2> 穿透</h2>\\n<p>缓存穿透是指：缓存和数据库都没有的数据，被大量请求，比如订单号不可能为-1，但是用户请求了大量订单号为-1的数据，由于数据不存在，缓存就也不会存在该数据，所有的请求都会直接穿透到数据库。\\n如果被恶意用户利用，疯狂请求不存在的数据，就会导致数据库压力过大，甚至垮掉。</p>\\n<blockquote>\\n<p>注意：穿透的意思是，都没有，直接一路打到数据库。</p>\\n</blockquote>\\n<h4> 缓存穿透的解决方案</h4>\\n<ol>\\n<li>\\n<p>接口增加业务层级的Filter，进行合法校验，这可以有效拦截大部分不合法的请求。</p>\\n<p>作为第一点的补充，最常见的是使用布隆过滤器，针对一个或者多个维度，把可能存在的数据值hash到bitmap中，bitmap证明该数据不存在则该数据一定不存在，但是bitmap证明该数据存在也只能是可能存在，因为不同的数值hash到的bit位很有可能是一样的，hash冲突会导致误判，多个hash方法也只能是降低冲突的概率，无法做到避免。</p>\\n</li>\\n<li>\\n<p>另外一个常见的方法，则是针对数据库与缓存都没有的数据，对空的结果进行缓存，但是过期时间设置得较短，一般五分钟内。而这种数据，如果数据库有写入，或者更新，必须同时刷新缓存，否则会导致不一致的问题存在。</p>\\n</li>\\n</ol>","autoDesc":true}');export{t as data};
