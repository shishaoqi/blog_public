import{_ as e,W as p,X as t,Y as n,Z as a,$ as i,a2 as l,C as o}from"./framework-7d1f27fd.js";const c="/article/docs/assets/DSA-single-link-65ca93f2.png",r="/article/docs/assets/DSA-double-link-69d9cfa4.png",d="/article/docs/assets/DSA-double-link2-1aec800e.png",u={},k=l(`<h1 id="数据结构实现基础" tabindex="-1"><a class="header-anchor" href="#数据结构实现基础" aria-hidden="true">#</a> 数据结构实现基础</h1><h2 id="引子" tabindex="-1"><a class="header-anchor" href="#引子" aria-hidden="true">#</a> 引子</h2><h3 id="数据统计" tabindex="-1"><a class="header-anchor" href="#数据统计" aria-hidden="true">#</a> 数据统计</h3><p>例子：在日常数据处理中，经常碰到需要对一组数据进行基本的统计分析，包含这些操作：平均数、最大值、最小值、中位数、标准差、方差等。这类统计可能发生在各种情况，比如学生成绩统计、家庭开支情况、GDP 统计等等，都会涉及到这类数据统计。</p><p>为每个具体应用都编写一个程序不会是一个好方法，程序都具有很大的相似性。数据结构的处理方法是从这些具体应用中<code>抽象出共性的数据组织与操作方法</code>，进而采用某种具体的程序设计语言<code>实现相应的数据存储与操作</code></p><p>数据抽象</p><ul><li>类型名称：统计数据集</li><li>数据对象集：N 个元素 {x<sub>1</sub>, x<sub>2</sub>, ... , x<sub>N</sub>} 的集合 S</li><li>操作集：</li></ul><ol><li>ElementType Average(S, N)：求 S 中 N 个元素的平均值</li><li>ElementType Max(S, N)：求 S 中 N 个元素的最大值</li><li>ElementType Min(S, N)：求 S 中 N 个元素的最小值</li><li>ElementType Median(S, N)：求 S 中 N 个元素的中位数</li></ol><h3 id="数据存储" tabindex="-1"><a class="header-anchor" href="#数据存储" aria-hidden="true">#</a> 数据存储</h3><p>数据组织的基本存储方式主要是利用数组和链表方式来实现的，包括很复杂的数据结构，如图、树，也都不外乎应用数组和链表来实现</p><ul><li>若要实现的操作不是基本统计，而是集合运算，需要判断元素是否属于集合、对集合进行并和交运算、元素插入集合等。这些操作虽然在简单数组也可以实现，但是效率不高，使用树的组织方式可以更方便的实现集合的上述运算。</li><li>若除了基本的统计操作外，还需要动态的维护一个集合，即经常往集合里加入/删除元素，那应该设计多大的数组来保存这些元素呢，太大浪费空间，太小不够用。使用链表来保存数据或许更适合，但是链表也有缺点，链表需要记录后续节点地址，跟数组存储相比，链表需要更多的存储空间，同时程序实现也比数组更加复杂。</li></ul><p>数据结构的存储实现跟所需要的操作密切相关，<code>没有最好的存储方式，只有最合适的存储方式</code>。</p><h3 id="操作实现" tabindex="-1"><a class="header-anchor" href="#操作实现" aria-hidden="true">#</a> 操作实现</h3><ul><li><p>在确定数据的存储方式后，数据结构涉及的另一个问题是相关的操作如何实现。这些操作的实现需要利用程序设计语言提供的另一个功能，即<code>流程设计功能</code>。</p></li><li><p>在任何高级程序设计语言都提供了一种的基本流程控制语句，即分支控制语句和循环控制语句。分支控制结构、循环控制结构加上程序自然的语句顺序执行结构，是实现任何算法流程的基本结构。</p></li><li><p>在程序中，我们可以将程序的某个基本功能设计为函数，这一方面降低了程序设计的复杂性，另一方面也提高了程序设计的重用性。递归是数据结构算法设计的很重要的手段。</p></li></ul><h2 id="数据结构存储基础" tabindex="-1"><a class="header-anchor" href="#数据结构存储基础" aria-hidden="true">#</a> 数据结构存储基础</h2><p>变量是数据存储的基本单位，而变量是有类型的，例如：整型、浮点型、字符型、布尔型</p><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><p>数组是由相同类型的元素（element）的集合所组成的资料结构，分配一块连续的内存来存储。利用元素的索引（index）可以计算出该元素对应的储存地址。</p><h3 id="指针" tabindex="-1"><a class="header-anchor" href="#指针" aria-hidden="true">#</a> 指针</h3><p>指针变量用于存放变量的地址，通过指针就能间接访问那个变量</p><blockquote><p>维基：在计算机科学中，指针是一种最简单形式的引用（reference）。</p></blockquote><blockquote><p>指针有两种含义，一是作为数据类型，二是作为实体。前者如字符指针、浮点数指针等等；后者如指针对象、指针变量等。</p></blockquote><h3 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体" aria-hidden="true">#</a> 结构体</h3><p>结构类型是一种允许把一些数据分量聚合成一个整体的数据类型，它能够把有内在联系的不同类型的数据统一成一个整体，使它们相互关联。同时，结构又是一个变量的集合，可以按照与成员类型变量相同的操作方法单独使用其变量成员。结构与数组的区别在于，数组的所有元素必须是相同类型的，而结构的成员可以是不同的数据类型。</p><blockquote><p>维基：结构体是一些相关字段的聚集，它们可由不同的数据类型组成，通常是固定的数量和序列。记录中的每个字段或称为元素，但可能与集合的元素概念混淆不清。在面向对象编程中，记录的字段也另外被称为成员；依照惯例和具体的编程语言，多元组有可能会被认为是一个记录，反之亦然。</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>struct 结构名 {
	类型名 结构成员名 1;
	类型名 结构成员名 2;
	......
	类型名 结构成员名 n;
};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h3><p>链表使一种常见而重要的基础数据结构，也是实现复杂数据结构的重要手段。它不按照线性的顺序存储数据，而是由若干个同一结构类型的&quot;结点&quot;依次串联而成的，即每一个结点里保存着下一个结点的地址。使用链表结构可以克服数据需要预先知道数据大小的缺点，可以充分利用计算机内存空间，实现灵活的内存动态管理。但链表失去了数组方便随机存储的优点，同时链表由于增加了结点的指针域，空间开销比较大。</p><blockquote><p>维基：链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。</p></blockquote><h3 id="单向链表" tabindex="-1"><a class="header-anchor" href="#单向链表" aria-hidden="true">#</a> 单向链表</h3><h4 id="单向链表的结构" tabindex="-1"><a class="header-anchor" href="#单向链表的结构" aria-hidden="true">#</a> 单向链表的结构</h4><figure><img src="`+c+`" alt="单向链表的组成示意图" tabindex="0" loading="lazy"><figcaption>单向链表的组成示意图</figcaption></figure><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">//单向链表结点</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">node</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token variable">$next</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * <span class="token keyword">@param</span> <span class="token parameter">$p1</span> 结点数据
	 * <span class="token keyword">@param</span> <span class="token parameter">$p2</span> 下一个结点
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$p1</span><span class="token punctuation">,</span> <span class="token variable">$p2</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span> <span class="token operator">=</span> <span class="token variable">$p1</span><span class="token punctuation">;</span>
		<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">next</span> <span class="token operator">=</span> <span class="token variable">$p2</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="单向链表的常见操作" tabindex="-1"><a class="header-anchor" href="#单向链表的常见操作" aria-hidden="true">#</a> 单向链表的常见操作</h4><ul><li>链表的建立</li></ul><p>应用链表进行程序设计时，往往需要先建立一个链表，建立链表的过程实际上就是不断在链表中插入结点的过程</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">singleLinkList</span>
<span class="token punctuation">{</span>
	<span class="token doc-comment comment">/**
	 * <span class="token keyword">@param</span> <span class="token parameter">$n</span> int 结点数目
	 * <span class="token keyword">@return</span> $head obj 头结点
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">create</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token variable">$head</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token variable">$n</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
			<span class="token variable">$newNode</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">node</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$newNode</span><span class="token operator">-&gt;</span><span class="token property">next</span> <span class="token operator">=</span> <span class="token variable">$head</span><span class="token operator">-&gt;</span><span class="token property">next</span><span class="token punctuation">;</span>
			<span class="token variable">$head</span><span class="token operator">-&gt;</span><span class="token property">next</span> <span class="token operator">=</span> <span class="token variable">$newNode</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token variable">$head</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>插入结点</li></ul><p>在单向链表 head 的某个结点 p 之后插入一新结点：找到正确位置 p，申请新结点 t 并对 t 的结点信息赋值，最后将 t 插入在 p 之后</p><ul><li>删除结点</li></ul><p>从单向链表 head 中删除一个结点：找到被删除结点的前面一个结点 p，删除 p 之后的结点</p><ul><li>单向链表的遍历</li></ul><p>对单向链表最常见的处理方式：逐个查看链表中每个结点的数据并进行处理</p><h3 id="双向链表" tabindex="-1"><a class="header-anchor" href="#双向链表" aria-hidden="true">#</a> 双向链表</h3><figure><img src="`+r+`" alt="双向链表" tabindex="0" loading="lazy"><figcaption>双向链表</figcaption></figure><p>在单向链表基础上增加指向前驱单元指针的链表叫做<code>双向链表</code>。结点增加指向其前驱结点的指针，将牺牲一部分空间代价，前驱单元查找可以不必从链头开始查找</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">//双向链表结点</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">node</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token variable">$next</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token variable">$previous</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * <span class="token keyword">@param</span> <span class="token parameter">$p1</span> 结点数据
	 * <span class="token keyword">@param</span> <span class="token parameter">$p2</span> 下一个结点
	 * <span class="token keyword">@param</span> <span class="token parameter">$p3</span> 前一个结点
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$p1</span><span class="token punctuation">,</span> <span class="token variable">$p2</span><span class="token punctuation">,</span> <span class="token variable">$p3</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span> <span class="token operator">=</span> <span class="token variable">$p1</span><span class="token punctuation">;</span>
		<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">next</span> <span class="token operator">=</span> <span class="token variable">$p2</span><span class="token punctuation">;</span>
		<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">previous</span> <span class="token operator">=</span> <span class="token variable">$p3</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="双向循环链表" tabindex="-1"><a class="header-anchor" href="#双向循环链表" aria-hidden="true">#</a> 双向循环链表</h3><figure><img src="`+d+'" alt="双向循环链表" tabindex="0" loading="lazy"><figcaption>双向循环链表</figcaption></figure><p>将双向链表最后一个单元的 Next 指针指向链表的第一个单元，而第一个单元的 Previous 指针指向链表的最后一个单元，这样构成的链表称为<code>双向循环链表</code></p><h2 id="流程控制基础" tabindex="-1"><a class="header-anchor" href="#流程控制基础" aria-hidden="true">#</a> 流程控制基础</h2><p>程序设计语言除了能表达各种各样的数据外，还必须提供一种手段来表达数据处理的过程，即<code>程序的控制过程</code>。程序的控制过程通过程序中的一系列语句来实现。</p><p>按照结构化程序设计的观点，任何程序都可以将程序模块通过三种基本的控制结构进行组合来实现。这三种基本的控制结构是<code>顺序</code>、<code>分支</code>、<code>循环</code>。</p>',53),v={href:"https://blog.maplemark.cn/2019/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0%E5%9F%BA%E7%A1%80.html",target:"_blank",rel:"noopener noreferrer"};function b(m,h){const s=o("ExternalLinkIcon");return p(),t("div",null,[k,n("p",null,[n("strong",null,[a("《数据结构实现基础》 原文链接："),n("a",v,[a("https://blog.maplemark.cn/2019/07/数据结构实现基础.html"),i(s)])])])])}const g=e(u,[["render",b],["__file","02.数据结构实现基础.html.vue"]]);export{g as default};
