const n=JSON.parse('{"key":"v-6081bf60","path":"/go%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/string/string.html","title":"中文字符串截取","lang":"zh-CN","frontmatter":{"description":"中文字符串截取 在go语言中可以通过切片截取一个数组或字符串，但是当截取的字符串是中文时，可能会出现的问题是：由于一个字不只是由一个字节组成，所以直接通过切片获取可能会把一个中文的编码截成两半，结果导致最后一个字符是乱码。 解决办法可以先将其转为 []rune 类型，再截取后，转回字符类型。 package main import ( \\"fmt\\" \\"unicode/utf8\\" ) func main() { str := \\"在Go中可以通过切片截取一个数组或字符串\\" // 打印字符串长度 fmt.Println(utf8.RuneCountInString(str)) // 打印字节长度 fmt.Println(len(str)) str1 := str[0:9] fmt.Println(str1) strRune := []rune(str) // 转换后的长度 fmt.Println(len(strRune)) fmt.Println(\\"string = \\", string(strRune[0:9]) }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/article/docs/go%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/string/string.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"中文字符串截取"}],["meta",{"property":"og:description","content":"中文字符串截取 在go语言中可以通过切片截取一个数组或字符串，但是当截取的字符串是中文时，可能会出现的问题是：由于一个字不只是由一个字节组成，所以直接通过切片获取可能会把一个中文的编码截成两半，结果导致最后一个字符是乱码。 解决办法可以先将其转为 []rune 类型，再截取后，转回字符类型。 package main import ( \\"fmt\\" \\"unicode/utf8\\" ) func main() { str := \\"在Go中可以通过切片截取一个数组或字符串\\" // 打印字符串长度 fmt.Println(utf8.RuneCountInString(str)) // 打印字节长度 fmt.Println(len(str)) str1 := str[0:9] fmt.Println(str1) strRune := []rune(str) // 转换后的长度 fmt.Println(len(strRune)) fmt.Println(\\"string = \\", string(strRune[0:9]) }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"中文字符串截取\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":3,"title":"按单词或字节反转字符串","slug":"按单词或字节反转字符串","link":"#按单词或字节反转字符串","children":[]},{"level":3,"title":"生成随机字符串","slug":"生成随机字符串","link":"#生成随机字符串","children":[]},{"level":3,"title":"控制大小写","slug":"控制大小写","link":"#控制大小写","children":[]},{"level":3,"title":"去除字符串首尾的空格","slug":"去除字符串首尾的空格","link":"#去除字符串首尾的空格","children":[]},{"level":3,"title":"生成 CSV 数据 -- 解析 CSV 数据","slug":"生成-csv-数据-解析-csv-数据","link":"#生成-csv-数据-解析-csv-数据","children":[]},{"level":3,"title":"获取中文字符串","slug":"获取中文字符串","link":"#获取中文字符串","children":[]},{"level":3,"title":"按指定函数分割字符串","slug":"按指定函数分割字符串","link":"#按指定函数分割字符串","children":[]},{"level":3,"title":"合并与分割字符串","slug":"合并与分割字符串","link":"#合并与分割字符串","children":[]},{"level":3,"title":"按照指定函数截取字符串","slug":"按照指定函数截取字符串","link":"#按照指定函数截取字符串","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.14,"words":641},"filePathRelative":"go编程技巧/string/string.md","excerpt":"<h1> 中文字符串截取</h1>\\n<p>在go语言中可以通过切片截取一个数组或字符串，但是当截取的字符串是中文时，可能会出现的问题是：由于一个字不只是由一个字节组成，所以直接通过切片获取可能会把一个中文的编码截成两半，结果导致最后一个字符是乱码。</p>\\n<blockquote>\\n<p>解决办法可以先将其转为 []rune 类型，再截取后，转回字符类型。</p>\\n</blockquote>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token string\\">\\"fmt\\"</span>\\n    <span class=\\"token string\\">\\"unicode/utf8\\"</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    str <span class=\\"token operator\\">:=</span> <span class=\\"token string\\">\\"在Go中可以通过切片截取一个数组或字符串\\"</span>\\n\\n    <span class=\\"token comment\\">// 打印字符串长度</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span>utf8<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">RuneCountInString</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\">// 打印字节长度</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n    str1 <span class=\\"token operator\\">:=</span> str<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">:</span><span class=\\"token number\\">9</span><span class=\\"token punctuation\\">]</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span>str1<span class=\\"token punctuation\\">)</span>\\n\\n    strRune <span class=\\"token operator\\">:=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token function\\">rune</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\">// 转换后的长度</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span>strRune<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"string = \\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">string</span><span class=\\"token punctuation\\">(</span>strRune<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">:</span><span class=\\"token number\\">9</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
