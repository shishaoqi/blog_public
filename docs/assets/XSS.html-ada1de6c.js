import{_ as s,W as r,X as l,Y as e,Z as t,$ as a,a2 as n,C as o}from"./framework-7d1f27fd.js";const c={},h=e("h1",{id:"xss",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#xss","aria-hidden":"true"},"#"),t(" XSS")],-1),d={href:"https://tech.meituan.com/2018/09/27/fe-security.html",target:"_blank",rel:"noopener noreferrer"},S=e("h3",{id:"跨站脚本攻击-xss",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#跨站脚本攻击-xss","aria-hidden":"true"},"#"),t(" 跨站脚本攻击(XSS)")],-1),u=e("p",null,"跨站脚本攻击(Cross Site Script，简称 XSS)，利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序",-1),p={href:"https://tech.meituan.com/2018/09/27/fe-security.html",target:"_blank",rel:"noopener noreferrer"},_=n('<p>为了和 CSS 区分，这里把攻击的第一个字母改成了 X，于是叫做 XSS。</p><p>XSS 的本质是：恶意代码未经过滤，与网站正常的代码混在一起；浏览器无法分辨哪些脚本是可信的，导致恶意脚本被执行。</p><p>而由于直接在用户的终端执行，恶意代码能够直接获取用户的信息，或者利用这些信息冒充用户向网站发起攻击者定义的请求。</p><p>在部分情况下，由于输入的限制，注入的恶意脚本比较短。但可以通过引入外部的脚本，并由浏览器执行，来完成比较复杂的攻击策略。</p><h5 id="这里有一个问题-用户是通过哪种方法-注入-恶意脚本的呢" tabindex="-1"><a class="header-anchor" href="#这里有一个问题-用户是通过哪种方法-注入-恶意脚本的呢" aria-hidden="true">#</a> 这里有一个问题：用户是通过哪种方法“注入”恶意脚本的呢？</h5><p>不仅仅是业务上的“用户的 UGC 内容”可以进行注入，包括 URL 上的参数等都可以是攻击的来源。在处理输入时，以下内容都不可信：</p><ul><li>来自用户的 UGC 信息</li><li>来自第三方的链接</li><li>URL 参数</li><li>POST 参数</li><li>Referer （可能来自不可信的来源）</li><li>Cookie （可能来自其他子域注入）</li></ul><h4 id="xss-分类" tabindex="-1"><a class="header-anchor" href="#xss-分类" aria-hidden="true">#</a> XSS 分类</h4><ul><li>反射型 XSS：简单地将用户输入的数据反射给浏览器</li><li>存储型 XSS：把用户输入的数据存储在服务器端</li><li>DOM Based XSS：修改页面 DOM 节点形成的 XSS</li></ul><h4 id="xss-防御" tabindex="-1"><a class="header-anchor" href="#xss-防御" aria-hidden="true">#</a> XSS 防御</h4><ul><li>通过 HTML 转义，可以防止 XSS 攻击。</li><li>为 Cookie 设置 HttpOnly，避免 Cookie 被劫持泄露</li><li>对输入/输出进行检查，明确编码方式</li></ul>',11);function f(m,x){const i=o("ExternalLinkIcon");return r(),l("div",null,[h,e("p",null,[e("a",d,[t("https://tech.meituan.com/2018/09/27/fe-security.html"),a(i)])]),S,u,e("blockquote",null,[e("p",null,[e("a",p,[t("https://tech.meituan.com/2018/09/27/fe-security.html"),a(i)]),t(" Cross-Site Scripting（跨站脚本攻击）简称 XSS，是一种代码注入攻击。攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行。利用这些恶意脚本，攻击者可获取用户的敏感信息如 Cookie、SessionID 等，进而危害数据安全。")])]),_])}const k=s(c,[["render",f],["__file","XSS.html.vue"]]);export{k as default};
