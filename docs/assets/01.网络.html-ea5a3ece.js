import{_ as h}from"./network-architecture-02-4ac96d9e.js";import{_ as l}from"./network-http-method-2e0bcc77.js";import{_ as o,W as c,X as n,Y as d,Z as t,$ as a,a1 as i,a2 as r,C as s}from"./framework-7d1f27fd.js";const p="/article/docs/assets/network-http-message-9d9e0138.png",T="/article/docs/assets/network-https-3c025918.png",E="/article/docs/assets/network-websocket-15fde1bc.png",_={},u=r('<h1 id="问题与简答" tabindex="-1"><a class="header-anchor" href="#问题与简答" aria-hidden="true">#</a> 问题与简答</h1><h2 id="网络篇" tabindex="-1"><a class="header-anchor" href="#网络篇" aria-hidden="true">#</a> 网络篇</h2><h3 id="_1-计算机网络体系结构" tabindex="-1"><a class="header-anchor" href="#_1-计算机网络体系结构" aria-hidden="true">#</a> 1. 计算机网络体系结构</h3><figure><img src="'+h+'" alt="计算机网络体系结构" tabindex="0" loading="lazy"><figcaption>计算机网络体系结构</figcaption></figure><h4 id="各层作用" tabindex="-1"><a class="header-anchor" href="#各层作用" aria-hidden="true">#</a> 各层作用</h4><ul><li>应用层：应用层协议定义的是应用进程间通信和交互的规则</li><li>运输层：运输层的任务就是负责向<code>两台主机中进程之间的通信</code>提供<code>通用的数据传输</code>服务</li><li>网络层：把运输层产生的报文段或用户数据报封装成<code>分组</code>或<code>包</code>进行传送</li><li>数据链路层：将网络层交下来的 IP 数据报组装成帧，并在两个相邻结点间的链路上传送</li><li>物理层：利用物理媒体以<code>比特</code>形式传送数据</li></ul>',6),P=r('<h3 id="_2-udp-的主要特点" tabindex="-1"><a class="header-anchor" href="#_2-udp-的主要特点" aria-hidden="true">#</a> 2. UDP 的主要特点</h3><ul><li>UDP 是<code>无连接的</code>，即发送数据之前不需要建立连接(发送数据结束时也没有连接可释放)，减少了开销和发送数据之前的时延</li><li>UDP 使用<code>尽最大努力交付</code>，即不保证可靠交付，主机不需要维持复杂的连接状态表</li><li>UDP 是<code>面向报文</code>的，发送方的 UDP 对应用程序交下来的报文，在添加首部后就向下交付 IP 层。UDP 对应用层交下来的报文，既不合并，也不拆分，而是<code>保留这些报文的边界</code></li><li>UDP <code>没有拥塞控制</code>，网络出现的拥塞不会使源主机的发送速率降低。这对某些实时应用是很重要的</li><li>UDP 支持一对一、一对多、多对一和多对多的交互通信</li><li>UDP 的<code>首部开销小</code>，只有8个字节，比 TCP 的20个字节的首部要短</li></ul>',2),B=r('<h3 id="_3-tcp-的主要特点" tabindex="-1"><a class="header-anchor" href="#_3-tcp-的主要特点" aria-hidden="true">#</a> 3. TCP 的主要特点</h3><ul><li>TCP 是<code>面向连接的运输层协议</code>。应用程序在使用 TCP 协议之前，必须先建立 TCP 连接。在传送数据完毕后，必须释放已经建立的 TCP 连接</li><li>每一条 TCP 连接只能有两个<code>端点</code>，每一条 TCP 连接只能是<code>点对点</code>的(一对一)</li><li>TCP 提供<code>可靠交付</code>的服务。通过 TCP 连接传送的数据，无差错、不丢失、不重复，并且按序到达</li><li>TCP 提供<code>全双工通信</code>。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接受缓存，用来临时存放双向通信的数据</li><li><code>面向字节流</code>。TCP 中的“流”指的是<code>流入到进程或从进程流出的字节序列</code></li></ul>',2),b=r('<h3 id="_4-简述三报文握手建立-tcp-连接" tabindex="-1"><a class="header-anchor" href="#_4-简述三报文握手建立-tcp-连接" aria-hidden="true">#</a> 4. 简述三报文握手建立 TCP 连接</h3><ul><li>服务器进程先创建传输控制块 TCB，并处于监听状态，等待客户端的连接请求;此时状态为LISTEN</li><li>客户端创建传输控制块 TCB，并向服务器发出连接请求报文段SYN,此时状态为SYN-SEND</li><li>服务器收到连接请求报文段后，如同意建立连接，则发送确认报文段ACK,此时状态为SYN-RECV，并且客户端链接进入半链接队列，系统参数/proc/sys/net/ipv4/tcp_max_syn_backlog</li><li>客户端进程收到服务器的确认报文段后，立即回复确认报文段ACK，并进入已建立连接状态，此时状态为ESTABLISHED</li><li>服务器收到确认报文段之后，也进入已建立连接状态，此时状态为ESTABLISHED，并且客户端链接进入全连接队列，系统参数/proc/sys/net/core/somaxconn</li></ul><blockquote><p>传输控制块 TCB(Transmission Control Block)存储了每一个连接中的一些重要信息</p></blockquote><h3 id="_5-建立-tcp-连接为什么最后还要发送确认" tabindex="-1"><a class="header-anchor" href="#_5-建立-tcp-连接为什么最后还要发送确认" aria-hidden="true">#</a> 5. 建立 TCP 连接为什么最后还要发送确认</h3><p>这主要是为了防止已失效的连接请求报文段突然又传到了 TCP 服务器，避免产生错误 简述为了保证数据的正确性和顺序</p><h3 id="_6-简述-tcp-连接的释放" tabindex="-1"><a class="header-anchor" href="#_6-简述-tcp-连接的释放" aria-hidden="true">#</a> 6. 简述 TCP 连接的释放</h3><ul><li>客户端应用进程发出连接释放报文段，并停止再发送数据，进入 FIN-WAIT-1(终止等待1)状态，等待服务器确认</li><li>服务器收到连接释放报文段后即发出确认，进入 CLOSE-WAIT(关闭等待)状态，服务器若发送数据，客户端扔要接收</li><li>客户端收到来自服务器的确认后，进入 FIN-WAIT-2(终止等待2)状态，等待服务器发出连接释放报文段</li><li>服务器没有要发送的数据，发出连接释放报文段，进入 LAST-ACK(最后确认)状态，等待客户端确认</li><li>客户端收到连接释放报文段后，发出确认，进入 TIME-WAIT(时间等待)状态，经过时间等待计时器设置的时间 2MSL 后，进入 CLOSED(关闭) 状态</li><li>服务器收到客户端报文段后，进入 CLOSED 状态</li></ul><h3 id="_7-time-wait-是什么-为什么必须等待-2mls" tabindex="-1"><a class="header-anchor" href="#_7-time-wait-是什么-为什么必须等待-2mls" aria-hidden="true">#</a> 7. TIME-WAIT 是什么，为什么必须等待 2MLS</h3><p>TIME-WAIT 是一种 TCP 状态。等待 2MLS 可以保证客户端最后一个报文段能够到达服务器，如果未到达，服务器则会超时重传连接释放报文段，使得客户端、服务器都可以正常进入到 CLOSE(关闭) 状态</p><h3 id="_8-tcp-粘包问题" tabindex="-1"><a class="header-anchor" href="#_8-tcp-粘包问题" aria-hidden="true">#</a> 8. TCP 粘包问题</h3><h4 id="粘包问题" tabindex="-1"><a class="header-anchor" href="#粘包问题" aria-hidden="true">#</a> 粘包问题</h4><p>在 TCP 这种字节流协议上做<code>应用层分包</code>是网络编程的基本需求。分包指的是在发生一个消息(message)或一帧(frame)数据时，通过一定的处理，让接收方能从字节流中识别并截取(还原)出一个个消息。因此，“粘包问题”是个伪命题</p><h4 id="长连接分包" tabindex="-1"><a class="header-anchor" href="#长连接分包" aria-hidden="true">#</a> 长连接分包</h4><ul><li>消息长度固定</li><li>使用特殊的字符或字符串作为消息的边界，例如 HTTP 协议的 headers 以“\\r\\n”为字段的分隔符</li><li>在每条消息的头部加一个长度字段，这恐怕是最常见的做法</li><li>利用消息本身的格式来分包，例如 XML 格式的消息中 <code>&lt;root&gt;</code>...<code>&lt;/root&gt;</code> 的配对，或者 JSON 格式中的 { ... } 的配对。解析这种消息格式通常会用到状态机(state machine)</li></ul>',14),f=r('<h3 id="_9-udp、tcp-区别-适用场景" tabindex="-1"><a class="header-anchor" href="#_9-udp、tcp-区别-适用场景" aria-hidden="true">#</a> 9. UDP、TCP 区别，适用场景</h3><table><thead><tr><th>对比项</th><th>UDP</th><th>TCP</th></tr></thead><tbody><tr><td>连接性</td><td>无连接</td><td>面向连接</td></tr><tr><td>可靠性</td><td>不可靠</td><td>可靠</td></tr><tr><td>报文</td><td>面向报文-数据报模式</td><td>面向字节流-流模式</td></tr><tr><td>双工性</td><td>一对一、一对多、多对一、多对多</td><td>全双工</td></tr><tr><td>流量控制</td><td>无</td><td>有(滑动窗口)</td></tr><tr><td>拥塞控制</td><td>无</td><td>有(慢开始、拥塞避免、快重传、快恢复)</td></tr><tr><td>传输速度</td><td>快</td><td>慢</td></tr><tr><td>资源要求</td><td>较少</td><td>较多</td></tr><tr><td>首部开销</td><td>8字节</td><td>20字节</td></tr><tr><td>数据顺序</td><td>不保证</td><td>保证</td></tr></tbody></table><h4 id="udp-适用场景" tabindex="-1"><a class="header-anchor" href="#udp-适用场景" aria-hidden="true">#</a> UDP 适用场景</h4><p>面向数据报方式、网络数据大多为短消息、拥有大量 Client、对数据安全性无特殊要求、网络负担非常重，但对响应速度要求高</p><h4 id="tcp-适用场景" tabindex="-1"><a class="header-anchor" href="#tcp-适用场景" aria-hidden="true">#</a> TCP 适用场景</h4><ul><li>文件传输(FTP HTTP 对数据准确性要求较高，速度可以相对慢)</li><li>发送或接收邮件(POP IMAP SMTP 对数据准确性要求高，非紧急应用)</li><li>远程登录(telnet SSH 对数据准确性有要求，有连接的概念)</li></ul><h3 id="_10-建立-socket-需要哪些步骤" tabindex="-1"><a class="header-anchor" href="#_10-建立-socket-需要哪些步骤" aria-hidden="true">#</a> 10. 建立 socket 需要哪些步骤</h3><ul><li>创建 socket</li><li>绑定 socket 到指定地址和端口</li><li>开始监听连接</li><li>读取客户端输入</li><li>关闭 socket</li></ul><h3 id="_11-dns-主要作用是什么" tabindex="-1"><a class="header-anchor" href="#_11-dns-主要作用是什么" aria-hidden="true">#</a> 11. DNS 主要作用是什么</h3><p>计算机既可以被赋予 IP 地址，也可以被赋予主机名和域名。用户通常使用主机名或域名来访问对方的计算机，而不是直接通过 IP 地址访问</p><p>但要让计算机去理解名称，相对而言就变得困难，因为计算机更擅长处理一长串数字</p><p>为了解决上述问题，DNS 服务应运而生。DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务</p><h3 id="_12-http-报文组成" tabindex="-1"><a class="header-anchor" href="#_12-http-报文组成" aria-hidden="true">#</a> 12. HTTP 报文组成</h3><p>HTTP 报文是由简单字符串组成，HTTP 报文都是纯文本，不是二进制代码，可以很方便地对其进行读写</p><figure><img src="'+p+'" alt="HTTP报文" tabindex="0" loading="lazy"><figcaption>HTTP报文</figcaption></figure><p>从客户端发往服务器的 HTTP 报文称为<code>请求报文</code>(request message)。从服务器发往客户端的报文称为<code>响应报文</code>(response message)。HTTP 请求和响应报文的格式很类似</p><p>HTTP 报文组成部分</p><ul><li>起始行：报文的第一行就是起始行，在请求报文中用来说明要做些什么，在响应报文中说明出现了什么情况</li><li>首部字段：起始行后面有零个或多个首部字段。每个首部字段都包含一个名字和一个值</li><li>主体：空行之后就是可选的报文主体了，其中包含了所有类型的数据</li></ul><h3 id="_13-http-状态码" tabindex="-1"><a class="header-anchor" href="#_13-http-状态码" aria-hidden="true">#</a> 13. HTTP 状态码</h3><blockquote><p>HTTP 状态码用来告诉客户端，发生了什么事情，状态码位于响应的起始行中</p></blockquote><h4 id="状态码分类" tabindex="-1"><a class="header-anchor" href="#状态码分类" aria-hidden="true">#</a> 状态码分类</h4><table><thead><tr><th>状态码</th><th>整体范围</th><th>已定义范围</th><th>分类</th></tr></thead><tbody><tr><td>1XX</td><td>100~199</td><td>100~101</td><td>信息提示</td></tr><tr><td>2XX</td><td>200~299</td><td>200~206</td><td>成功</td></tr><tr><td>3XX</td><td>300~399</td><td>300~305</td><td>重定向</td></tr><tr><td>4XX</td><td>400~499</td><td>400~415</td><td>客户端错误</td></tr><tr><td>5XX</td><td>500~599</td><td>500~505</td><td>服务器错误</td></tr></tbody></table><h4 id="常见状态码" tabindex="-1"><a class="header-anchor" href="#常见状态码" aria-hidden="true">#</a> 常见状态码</h4><table><thead><tr><th>状态码</th><th>原因短语</th><th>含义</th><th>考察概率</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>请求没有问题</td><td>***</td></tr><tr><td>206</td><td>Partial Content</td><td>部分或 Range(范围) 请求</td><td>*</td></tr><tr><td>301</td><td>Moved Permanently</td><td>在请求的链接被移除时使用</td><td>**</td></tr><tr><td>302</td><td>Found</td><td>在请求临时的链接使用</td><td>**</td></tr><tr><td>304</td><td>Not Modified</td><td>资源未被修改可使用旧资源</td><td>**</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>在请求临时的链接使用</td><td>**</td></tr><tr><td>400</td><td>Bad Request</td><td>告知客户端发送了错误请求</td><td>***</td></tr><tr><td>403</td><td>Forbidden</td><td>请求被服务器拒绝</td><td>***</td></tr><tr><td>404</td><td>Not Found</td><td>无法找到所请求的 URL</td><td>***</td></tr><tr><td>413</td><td>Request entiry too large</td><td>请求实体过大</td><td>*</td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器遇到错误</td><td>***</td></tr><tr><td>502</td><td>Bad Gateway</td><td>代理或网关错误(无法连接到其父网关)</td><td>***</td></tr><tr><td>503</td><td>Service Unavailable</td><td>无法为请求提供服务</td><td>***</td></tr><tr><td>504</td><td>Gateway Timeout</td><td>代理或网关超时(等待另一服务器响应超时)</td><td>***</td></tr></tbody></table>',24),C=d("h3",{id:"_14-常见的-http-方法",tabindex:"-1"},[d("a",{class:"header-anchor",href:"#_14-常见的-http-方法","aria-hidden":"true"},"#"),t(" 14. 常见的 HTTP 方法")],-1),x=d("figure",null,[d("img",{src:l,alt:"HTTP方法",tabindex:"0",loading:"lazy"}),d("figcaption",null,"HTTP方法")],-1),m=r('<h3 id="_15-get-与-post-请求方式区别" tabindex="-1"><a class="header-anchor" href="#_15-get-与-post-请求方式区别" aria-hidden="true">#</a> 15. GET 与 POST 请求方式区别</h3><table><thead><tr><th>GET</th><th>POST</th></tr></thead><tbody><tr><td>后退按钮/刷新无害</td><td>数据会被重新提交</td></tr><tr><td>数据长度限制/URL长度2048字符</td><td>长度无限制（协议不限制；实际上受nginx和PHP的限制，php还会限制post报文变量的个数）</td></tr><tr><td>数据可见/安全性差</td><td>不可见/更安全</td></tr><tr><td>可以被缓存</td><td>不可以被缓存</td></tr><tr><td>书签可收藏</td><td>书签不可收藏</td></tr><tr><td>产生一个TCP数据包</td><td>产生两个TCP数据包</td></tr></tbody></table><h3 id="_16-http-优缺点" tabindex="-1"><a class="header-anchor" href="#_16-http-优缺点" aria-hidden="true">#</a> 16. HTTP 优缺点</h3><p>基于应用级的接口，使用方便</p><p>传输速度慢，数据包大；如实现实时交互，服务器性能压力大；数据传输安全性差</p><h3 id="_17-https-通信原理" tabindex="-1"><a class="header-anchor" href="#_17-https-通信原理" aria-hidden="true">#</a> 17. HTTPS 通信原理</h3><figure><img src="'+T+'" alt="HTTPS通信原理" tabindex="0" loading="lazy"><figcaption>HTTPS通信原理</figcaption></figure>',7),g=r('<h3 id="_18-http-2-0" tabindex="-1"><a class="header-anchor" href="#_18-http-2-0" aria-hidden="true">#</a> 18. HTTP 2.0</h3><p>多路复用、客户端拉拽/服务器推送、流量控制、WebSocket</p><h3 id="_19-websocket" tabindex="-1"><a class="header-anchor" href="#_19-websocket" aria-hidden="true">#</a> 19. WebSocket</h3><p>WebSocket 是一种通信协议，定义了一个全双工通信信道，仅通过 Web 上的一个 Socket 即可进行通信</p><h4 id="主要特点" tabindex="-1"><a class="header-anchor" href="#主要特点" aria-hidden="true">#</a> 主要特点</h4><ul><li>推送功能：支持由服务器向客户端推送数据的推送功能</li><li>减少通信量：只要建立起 WebSocket 连接，就希望一直保持连接状态</li></ul><figure><img src="'+E+'" alt="websocket" tabindex="0" loading="lazy"><figcaption>websocket</figcaption></figure><h3 id="_20-ipv6-与-ipv4-有什么变化" tabindex="-1"><a class="header-anchor" href="#_20-ipv6-与-ipv4-有什么变化" aria-hidden="true">#</a> 20. IPv6 与 IPv4 有什么变化</h3><p>更大的地址空间、扩展的地址层次结构、灵活的首部格式、改进的选项、允许协议继续扩充、支持资源的预分配</p><h3 id="_21-什么是心跳机制" tabindex="-1"><a class="header-anchor" href="#_21-什么是心跳机制" aria-hidden="true">#</a> 21. 什么是心跳机制</h3><p>心跳机制是定时发送一个自定义的结构体(心跳包)，让对方知道自己还活着，以确保连接的有效性的机制</p><h3 id="_22-什么是长连接" tabindex="-1"><a class="header-anchor" href="#_22-什么是长连接" aria-hidden="true">#</a> 22. 什么是长连接</h3><p>长连接，指在一个连接上可以连续发送多个数据包，在连接保持期间，如果没有数据包发送，需要双方发链路检测包</p>',13);function A(D,S){const e=s("RouterLink");return c(),n("div",null,[u,d("p",null,[t("拓展阅读 "),a(e,{to:"/interview/%E7%BD%91%E7%BB%9C/01.%E7%BD%91%E7%BB%9C/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.html"},{default:i(()=>[t("《计算机网络体系结构》")]),_:1})]),P,d("p",null,[t("拓展阅读 "),a(e,{to:"/interview/%E7%BD%91%E7%BB%9C/01.%E7%BD%91%E7%BB%9C/02.%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AEUDP.html"},{default:i(()=>[t("《用户数据报协议 UDP》")]),_:1})]),B,d("p",null,[t("拓展阅读 "),a(e,{to:"/interview/%E7%BD%91%E7%BB%9C/01.%E7%BD%91%E7%BB%9C/03.%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AETCP.html"},{default:i(()=>[t("《传输控制协议 TCP》")]),_:1})]),b,d("p",null,[t("拓展阅读 "),a(e,{to:"/interview/%E7%BD%91%E7%BB%9C/01.%E7%BD%91%E7%BB%9C/04.TCP%E7%B2%98%E5%8C%85%E6%8B%86%E5%8C%85.html"},{default:i(()=>[t("《TCP粘包拆包》")]),_:1})]),f,d("p",null,[t("拓展阅读 "),a(e,{to:"/interview/%E7%BD%91%E7%BB%9C/01.%E7%BD%91%E7%BB%9C/05.HTTP%E7%8A%B6%E6%80%81%E7%A0%81.html"},{default:i(()=>[t("《HTTP状态码》")]),_:1})]),d("p",null,[t("拓展阅读 "),a(e,{to:"/interview/03.PHP/QA.html#502504-%E9%94%99%E8%AF%AF%E4%BA%A7%E7%94%9F%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F"},{default:i(()=>[t("《5xx系列错误》")]),_:1})]),C,x,d("p",null,[t("拓展阅读 "),a(e,{to:"/interview/%E7%BD%91%E7%BB%9C/01.%E7%BD%91%E7%BB%9C/06.HTTP%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3.html"},{default:i(()=>[t("《HTTP方法详解》")]),_:1})]),m,d("p",null,[t("拓展阅读 "),a(e,{to:"/interview/%E7%BD%91%E7%BB%9C/01.%E7%BD%91%E7%BB%9C/07.HTTPS%E7%BB%86%E8%8A%82%E4%BB%8B%E7%BB%8D.html"},{default:i(()=>[t("《HTTPS细节介绍》")]),_:1})]),g])}const v=o(_,[["render",A],["__file","01.网络.html.vue"]]);export{v as default};
