import{_ as o,W as _,X as s,Y as e,Z as n,$ as l,C as r}from"./framework-7d1f27fd.js";const a={},c=e("h1",{id:"缓存和数据库一致性问题",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#缓存和数据库一致性问题","aria-hidden":"true"},"#"),n(" 缓存和数据库一致性问题")],-1),i=e("p",null,"如何保证缓存和数据库一致性，这是一个老生常谈的话题了。",-1),h=e("p",null,"但很多人对这个问题，依旧有很多疑惑：",-1),u=e("ul",null,[e("li",null,"到底是更新缓存还是删缓存？"),e("li",null,"到底选择先更新数据库，再删除缓存，还是先删除缓存，再更新数据库？"),e("li",null,"为什么要引入消息队列保证一致性？"),e("li",null,"延迟双删会有什么问题？到底要不要用？"),e("li",null,"...")],-1),d={href:"https://zhuanlan.zhihu.com/p/338833847",target:"_blank",rel:"noopener noreferrer"},p={href:"https://mp.weixin.qq.com/s/4W7vmICGx6a_WX701zxgPQ",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,"一致性问题是分布式常见问题，还可以再分为终一致性和强一致性。数 据库和缓存双写，就必然会存在不一致的问题。答这个问题，先明白一个前提。 就是如果对数据有强一致性要求，不能放缓存。我们所做的一切，只能保证终 一致性。另外，我们所做的方案其实从根本上来说，只能说降低不一致发生的概 率，无法完全避免。因此，有强一致性要求的数据，不能放缓存。",-1),x=e("p",null,"首先，采取正确更新策略，先更新数据库，再删缓存。其次，因为可能存在删除 缓存失败的问题，提供一个补偿措施即可，例如利用消息队列。",-1);function f(k,z){const t=r("ExternalLinkIcon");return _(),s("div",null,[c,i,h,u,e("p",null,[e("a",d,[n("https://zhuanlan.zhihu.com/p/338833847"),l(t)])]),e("p",null,[e("a",p,[n("https://mp.weixin.qq.com/s/4W7vmICGx6a_WX701zxgPQ"),l(t)])]),m,x])}const W=o(a,[["render",f],["__file","redis 和数据库一致性问题.html.vue"]]);export{W as default};
