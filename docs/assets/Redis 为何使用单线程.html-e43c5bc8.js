import{_ as i,W as a,X as n,Y as e,Z as r,$ as t,a2 as o,C as d}from"./framework-7d1f27fd.js";const l={},_=o('<h1 id="为什么redis单线程还这么快" tabindex="-1"><a class="header-anchor" href="#为什么redis单线程还这么快" aria-hidden="true">#</a> 为什么Redis单线程还这么快？</h1><ol><li>使用单线程模型能带来更好的可维护性，方便开发和调试；</li><li>使用单线程模型也能并发的处理客户端的请求；</li></ol><p>官方FAQ表示，因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了（毕竟采用多线程会有很多麻烦！）。</p><p>严格来说，Redis Server是多线程的，只是它的请求处理整个流程是单线程处理的。这一点我们一定要清楚了解到，不要单纯地认为Redis Server是单线程的！</p><p>Redis的性能非常之高，每秒可以承受10W+的QPS，它如此优秀的性能主要取决于以下几个方面：</p><ul><li>纯内存操作</li><li>使用IO多路复用技术</li><li>非CPU密集型任务</li><li>单线程的优势</li></ul>',6),c={href:"http://kaito-kidd.com/2020/06/28/why-redis-so-fast/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://draveness.me/whys-the-design-redis-single-thread/",target:"_blank",rel:"noopener noreferrer"};function p(f,m){const s=d("ExternalLinkIcon");return a(),n("div",null,[_,e("p",null,[e("a",c,[r("http://kaito-kidd.com/2020/06/28/why-redis-so-fast/"),t(s)]),e("a",h,[r("https://draveness.me/whys-the-design-redis-single-thread/"),t(s)])])])}const u=i(l,[["render",p],["__file","Redis 为何使用单线程.html.vue"]]);export{u as default};
