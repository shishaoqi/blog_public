const e=JSON.parse('{"key":"v-fed34834","path":"/interview/%E5%89%8D%E7%AB%AF/12.%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5.html","title":"浏览器的同源策略","lang":"zh-CN","frontmatter":{"description":"浏览器的同源策略 同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。 同源的定义 如果两个页面的协议，端口（如果有指定）和主机都相同，则两个页面具有相同的源。我们也可以把它称为“协议/主机/端口 tuple”，或简单地叫做“tuple\\". (\\"tuple\\" ，“元”，是指一些事物组合在一起形成一个整体，比如（1，2）叫二元，（1，2，3）叫三元) 下表给出了相对 http://store.company.com/dir/page.html 同源检测的示例:","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/article/docs/interview/%E5%89%8D%E7%AB%AF/12.%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"浏览器的同源策略"}],["meta",{"property":"og:description","content":"浏览器的同源策略 同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。 同源的定义 如果两个页面的协议，端口（如果有指定）和主机都相同，则两个页面具有相同的源。我们也可以把它称为“协议/主机/端口 tuple”，或简单地叫做“tuple\\". (\\"tuple\\" ，“元”，是指一些事物组合在一起形成一个整体，比如（1，2）叫二元，（1，2，3）叫三元) 下表给出了相对 http://store.company.com/dir/page.html 同源检测的示例:"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器的同源策略\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"同源的定义","slug":"同源的定义","link":"#同源的定义","children":[{"level":3,"title":"源的继承","slug":"源的继承","link":"#源的继承","children":[]},{"level":3,"title":"IE 例外","slug":"ie-例外","link":"#ie-例外","children":[]}]},{"level":2,"title":"源的更改","slug":"源的更改","link":"#源的更改","children":[]},{"level":2,"title":"跨源网络访问","slug":"跨源网络访问","link":"#跨源网络访问","children":[{"level":3,"title":"如何允许跨源访问","slug":"如何允许跨源访问","link":"#如何允许跨源访问","children":[]},{"level":3,"title":"如何阻止跨源访问","slug":"如何阻止跨源访问","link":"#如何阻止跨源访问","children":[]}]},{"level":2,"title":"跨源脚本API访问","slug":"跨源脚本api访问","link":"#跨源脚本api访问","children":[{"level":3,"title":"Window","slug":"window","link":"#window","children":[]},{"level":3,"title":"Location","slug":"location","link":"#location","children":[]}]},{"level":2,"title":"跨源数据存储访问","slug":"跨源数据存储访问","link":"#跨源数据存储访问","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":6.74,"words":2021},"filePathRelative":"interview/前端/12.浏览器的同源策略.md","excerpt":"<h1> 浏览器的同源策略</h1>\\n<p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p>\\n<h2> 同源的定义</h2>\\n<p>如果两个页面的协议，端口（如果有指定）和主机都相同，则两个页面具有相同的源。我们也可以把它称为“协议/主机/端口 tuple”，或简单地叫做“tuple\\". (\\"tuple\\" ，“元”，是指一些事物组合在一起形成一个整体，比如（1，2）叫二元，（1，2，3）叫三元)</p>\\n<p>下表给出了相对 <code>http://store.company.com/dir/page.html</code> 同源检测的示例:</p>","autoDesc":true}');export{e as data};
