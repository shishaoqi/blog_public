import{_ as t,W as i,X as p,Y as a,Z as n,$ as l,a1 as o,a2 as s,C as r}from"./framework-7d1f27fd.js";const c="/article/docs/assets/php-base64-c4553230.png",d="/article/docs/assets/php-ip2long-07601fed.png",u={},h=s('<h1 id="问题与简答" tabindex="-1"><a class="header-anchor" href="#问题与简答" aria-hidden="true">#</a> 问题与简答</h1><h2 id="php-篇" tabindex="-1"><a class="header-anchor" href="#php-篇" aria-hidden="true">#</a> PHP 篇</h2><h3 id="echo、print、print-r、var-dump-区别" tabindex="-1"><a class="header-anchor" href="#echo、print、print-r、var-dump-区别" aria-hidden="true">#</a> echo、print、print_r、var_dump 区别</h3><blockquote><p><code>echo</code>和<code>print</code>是语言结构、<code>print_r</code>和<code>var_dump</code>是普通函数</p></blockquote><ul><li><p>echo：输出一个或多个字符串</p></li><li><p>print：输出字符串</p></li><li><p>print_r：打印关于变量的易于理解的信息</p></li><li><p>var_dump：打印关于变量的易于理解的信息(带类型)</p></li></ul>',5),k=s('<h3 id="单引号和双引号的区别" tabindex="-1"><a class="header-anchor" href="#单引号和双引号的区别" aria-hidden="true">#</a> 单引号和双引号的区别</h3><p>双引号可以被分析器解析，单引号则不行</p><h6 id="详细" tabindex="-1"><a class="header-anchor" href="#详细" aria-hidden="true">#</a> 详细</h6><ol start="0"><li>单引号不能解析变量</li><li>单引号不能解析转义字符,只能解析单引号和反斜线本身</li><li>变量和变量,变量和字符串,字符串和字符串之间可以用.连接</li><li>双引号可以解析变量,变量可以使用特殊字符和{}包含</li><li>双引号可以解析所有转义字符</li><li>也可以使用.来连接 最重要的是单引号比双引号效率高</li></ol><h3 id="isset-和-empty-的区别" tabindex="-1"><a class="header-anchor" href="#isset-和-empty-的区别" aria-hidden="true">#</a> isset 和 empty 的区别</h3><h3 id="static、self、-this-的区别" tabindex="-1"><a class="header-anchor" href="#static、self、-this-的区别" aria-hidden="true">#</a> static、self、$this 的区别</h3><p>static：static 可以用于静态或非静态方法中，也可以访问类的静态属性、静态方法、常量和非静态方法，但不能访问非静态属性</p><p>self：可以用于访问类的静态属性、静态方法和常量，但 self 指向的是当前定义所在的类，这是 self 的限制</p>',8),m=a("p",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"t"),a("mi",null,"h"),a("mi",null,"i"),a("mi",null,"s"),a("mtext",null,"：指向的是实际调用时的对象，也就是说，实际运行过程中，谁调用了类的属性或方法，")]),a("annotation",{encoding:"application/x-tex"},"this：指向的是实际调用时的对象，也就是说，实际运行过程中，谁调用了类的属性或方法，")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathnormal"},"t"),a("span",{class:"mord mathnormal"},"hi"),a("span",{class:"mord mathnormal"},"s"),a("span",{class:"mord cjk_fallback"},"：指向的是实际调用时的对象，也就是说，实际运行过程中，谁调用了类的属性或方法，")])])]),n("this 指向的就是哪个对象。但 $this 不能访问类的静态属性和常量，且 $this 不能存在于静态方法中")],-1),b=s(`<h3 id="include、require、include-once、require-once-的区别" tabindex="-1"><a class="header-anchor" href="#include、require、include-once、require-once-的区别" aria-hidden="true">#</a> include、require、include_once、require_once 的区别</h3><p>require 和 include 几乎完全一样，除了处理失败的方式不同之外。require 在出错时产生 E_COMPILE_ERROR 级别的错误。换句话说将导致脚本中止而 include 只产生警告（E_WARNING），脚本会继续运行</p><p>include_once 语句在脚本执行期间包含并运行指定文件。此行为和 include 语句类似，唯一区别是如果该文件中已经被包含过，则不会再次包含。如同此语句名字暗示的那样，只会包含一次</p><h3 id="常见数组函数" tabindex="-1"><a class="header-anchor" href="#常见数组函数" aria-hidden="true">#</a> 常见数组函数</h3><p>array_count_values — 统计数组中所有的值</p><p>array_flip — 交换数组中的键和值</p><p>array_merge — 合并一个或多个数组</p><p>array_multisort — 对多个数组或多维数组进行排序</p><p>array_pad — 以指定长度将一个值填充进数组</p><p>array_pop — 弹出数组最后一个单元(出栈)</p><p>array_push — 将一个或多个单元压入数组的末尾(入栈)</p><p>array_rand — 从数组中随机(伪随机)取出一个或多个单元</p><p>array_keys — 返回数组中部分的或所有的键名</p><p>array_values — 返回数组中所有的值</p><p>count — 计算数组中的单元数目，或对象中的属性个数</p><p>sort — 对数组排序</p><h3 id="cookie-和-session" tabindex="-1"><a class="header-anchor" href="#cookie-和-session" aria-hidden="true">#</a> Cookie 和 Session</h3><p>Cookie：PHP 透明的支持 HTTP cookie 。cookie 是一种远程浏览器端存储数据并以此来跟踪和识别用户的机制</p><p>Session：会话机制(Session)在 PHP 中用于保持用户连续访问Web应用时的相关数据</p><h3 id="预定义变量" tabindex="-1"><a class="header-anchor" href="#预定义变量" aria-hidden="true">#</a> 预定义变量</h3><p>对于全部脚本而言，PHP 提供了大量的预定义变量</p><p>超全局变量 — 超全局变量是在全部作用域中始终可用的内置变量</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$GLOBALS — 引用全局作用域中可用的全部变量
$_SERVER — 服务器和执行环境信息
$_GET — HTTP GET 变量
$_POST — HTTP POST 变量
$_FILES — HTTP 文件上传变量
$_REQUEST — HTTP Request 变量
$_SESSION — Session 变量
$_ENV — 环境变量
$_COOKIE — HTTP Cookies
$php_errormsg — 前一个错误信息
$HTTP_RAW_POST_DATA — 原生POST数据
$http_response_header — HTTP 响应头
$argc — 传递给脚本的参数数目
$argv — 传递给脚本的参数数组
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>超全局变量</li></ul><p>PHP 中的许多预定义变量都是“超全局的”，这意味着它们在一个脚本的全部作用域中都可用。在函数或方法中无需执行 global $variable; 就可以访问它们</p>`,25),v=a("p",null,[n("超全局变量："),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"G"),a("mi",null,"L"),a("mi",null,"O"),a("mi",null,"B"),a("mi",null,"A"),a("mi",null,"L"),a("mi",null,"S"),a("mtext",null,"、")]),a("annotation",{encoding:"application/x-tex"},"GLOBALS、")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal"},"G"),a("span",{class:"mord mathnormal"},"L"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"OB"),a("span",{class:"mord mathnormal"},"A"),a("span",{class:"mord mathnormal"},"L"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),a("span",{class:"mord cjk_fallback"},"、")])])]),n("_SERVER、"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"_"),a("mi",null,"G"),a("mi",null,"E"),a("mi",null,"T"),a("mtext",null,"、")]),a("annotation",{encoding:"application/x-tex"},"\\_GET、")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.9933em","vertical-align":"-0.31em"}}),a("span",{class:"mord",style:{"margin-right":"0.02778em"}},"_"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"GET"),a("span",{class:"mord cjk_fallback"},"、")])])]),n("_POST、"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"_"),a("mi",null,"F"),a("mi",null,"I"),a("mi",null,"L"),a("mi",null,"E"),a("mi",null,"S"),a("mtext",null,"、")]),a("annotation",{encoding:"application/x-tex"},"\\_FILES、")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.9933em","vertical-align":"-0.31em"}}),a("span",{class:"mord",style:{"margin-right":"0.02778em"}},"_"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"F"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),a("span",{class:"mord mathnormal"},"L"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"ES"),a("span",{class:"mord cjk_fallback"},"、")])])]),n("_COOKIE、"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"_"),a("mi",null,"S"),a("mi",null,"E"),a("mi",null,"S"),a("mi",null,"S"),a("mi",null,"I"),a("mi",null,"O"),a("mi",null,"N"),a("mtext",null,"、")]),a("annotation",{encoding:"application/x-tex"},"\\_SESSION、")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.9933em","vertical-align":"-0.31em"}}),a("span",{class:"mord",style:{"margin-right":"0.02778em"}},"_"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"SESS"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"ON"),a("span",{class:"mord cjk_fallback"},"、")])])]),n("_REQUEST、$_ENV")],-1),g=s(`<h3 id="传值和传引用的区别" tabindex="-1"><a class="header-anchor" href="#传值和传引用的区别" aria-hidden="true">#</a> 传值和传引用的区别</h3><p>传值导致对象生成了一个拷贝，传引用则可以用两个变量指向同一个内容</p><h3 id="构造函数和析构函数" tabindex="-1"><a class="header-anchor" href="#构造函数和析构函数" aria-hidden="true">#</a> 构造函数和析构函数</h3><p>构造函数：PHP 5 允行开发者在一个类中定义一个方法作为构造函数。具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作</p><p>析构函数：PHP 5 引入了析构函数的概念，这类似于其它面向对象的语言，如 C++。析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行</p><h3 id="魔术方法" tabindex="-1"><a class="header-anchor" href="#魔术方法" aria-hidden="true">#</a> 魔术方法</h3><p>__construct()， __destruct()， __call()， __callStatic()， __get()， __set()， __isset()， __unset()， __sleep()， __wakeup()， __toString()， __invoke() 等方法在 PHP 中被称为&quot;魔术方法&quot;（Magic methods）</p><h3 id="public、protected、private、final-区别" tabindex="-1"><a class="header-anchor" href="#public、protected、private、final-区别" aria-hidden="true">#</a> public、protected、private、final 区别</h3><p>对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。被定义为公有的类成员可以在任何地方被访问</p><p>PHP 5 新增了一个 final 关键字。如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承</p><h3 id="客户端-服务端-ip-获取-了解代理透传-实际ip-的概念" tabindex="-1"><a class="header-anchor" href="#客户端-服务端-ip-获取-了解代理透传-实际ip-的概念" aria-hidden="true">#</a> 客户端/服务端 IP 获取，了解代理透传 实际IP 的概念</h3><p>客户端IP: $_SERVER[&#39;REMOTE_ADDR&#39;]</p><p>服务端IP: $_SERVER[&#39;SERVER_ADDR&#39;]</p><p>客户端IP(代理透传): $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]</p><h3 id="类的静态调用和实例化调用" tabindex="-1"><a class="header-anchor" href="#类的静态调用和实例化调用" aria-hidden="true">#</a> 类的静态调用和实例化调用</h3><ul><li>占用内存</li></ul><p>静态方法在内存中只有一份，无论调用多少次，都是共用的</p><p>实例化不一样，每一个实例化是一个对象，在内存中是多个的</p><ul><li>不同点</li></ul><p>静态调用不需要实例化即可调用</p><p>静态方法不能调用非静态属性，因为非静态属性需要实例化后，存放在对象里</p><p>静态方法可以调用非静态方法，使用 self 关键字。php 里，一个方法被 <code>self::</code> 后，自动转变为静态方法</p><p>调用类的静态函数时不会自动调用类的构造函数</p><h3 id="接口和抽象的区别" tabindex="-1"><a class="header-anchor" href="#接口和抽象的区别" aria-hidden="true">#</a> 接口和抽象的区别</h3><p>抽象用于描述不同的事物，接口用于描述事物的行为。</p><h3 id="php-不实例化调用方法" tabindex="-1"><a class="header-anchor" href="#php-不实例化调用方法" aria-hidden="true">#</a> PHP 不实例化调用方法</h3><p>静态调用、使用 PHP 反射方式</p><h3 id="php-ini-配置选项" tabindex="-1"><a class="header-anchor" href="#php-ini-配置选项" aria-hidden="true">#</a> php.ini 配置选项</h3><ul><li>配置选项</li></ul><table><thead><tr><th>名字</th><th>默认</th><th>备注</th></tr></thead><tbody><tr><td>short_open_tag</td><td>&quot;1&quot;</td><td>是否开启缩写形式(<code>&lt;? ?&gt;</code>)</td></tr><tr><td>precision</td><td>&quot;14&quot;</td><td>浮点数中显示有效数字的位数</td></tr><tr><td>disable_functions</td><td>&quot;&quot;</td><td>禁止某些函数</td></tr><tr><td>disable_classes</td><td>&quot;&quot;</td><td>禁用某些类</td></tr><tr><td>expose_php</td><td>&quot;&quot;</td><td>是否暴露 PHP 被安装在服务器上</td></tr><tr><td>max_execution_time</td><td>30</td><td>最大执行时间</td></tr><tr><td>memory_limit</td><td>128M</td><td>每个脚本执行的内存限制</td></tr><tr><td>error_reporting</td><td>NULL</td><td>设置错误报告的级别 <code>E_ALL</code> &amp; ~<code>E_NOTICE</code> &amp; ~<code>E_STRICT</code> &amp; ~<code>E_DEPRECATED</code></td></tr><tr><td>display_errors</td><td>&quot;1&quot;</td><td>显示错误</td></tr><tr><td>log_errors</td><td>&quot;0&quot;</td><td>设置是否将错误日志记录到 error_log 中</td></tr><tr><td>error_log</td><td>NULL</td><td>设置脚本错误将被记录到的文件</td></tr><tr><td>upload_max_filesize</td><td>&quot;2M&quot;</td><td>最大上传文件大小</td></tr><tr><td>post_max_size</td><td>&quot;8M&quot;</td><td>设置POST最大数据限制</td></tr></tbody></table><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php <span class="token parameter variable">-ini</span> <span class="token operator">|</span> <span class="token function">grep</span> short_open_tag //查看 php.ini 配置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>动态设置</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$varname</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$newvalue</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;date.timezone&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Asia/Shanghai&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置时区</span>
<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;display_errors&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置显示错误</span>
<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;memory_limit&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;256M&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置最大内存限制</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="php-fpm-conf-配置" tabindex="-1"><a class="header-anchor" href="#php-fpm-conf-配置" aria-hidden="true">#</a> php-fpm.conf 配置</h3><table><thead><tr><th>名称</th><th>默认</th><th>备注</th></tr></thead><tbody><tr><td>pid</td><td></td><td>PID文件的位置</td></tr><tr><td>error_log</td><td></td><td>错误日志的位置</td></tr><tr><td>log_level</td><td>notice</td><td>错误级别 alert:必须立即处理、error:错误情况、warning:警告情况、notice:一般重要信息、debug:调试信息</td></tr><tr><td>daemonize</td><td>yes</td><td>设置 FPM 在后台运行</td></tr><tr><td>listen</td><td>ip:port、port、/path/to/unix/socket</td><td>设置接受 FastCGI 请求的地址</td></tr><tr><td>pm</td><td>static、ondemand、dynamic</td><td>设置进程管理器如何管理子进程</td></tr><tr><td>request_slowlog_timeout</td><td>&#39;0&#39;</td><td>慢日志记录阀值</td></tr><tr><td>slowlog</td><td></td><td>慢请求的记录日志</td></tr></tbody></table><h3 id="_502、504-错误产生原因及解决方式" tabindex="-1"><a class="header-anchor" href="#_502、504-错误产生原因及解决方式" aria-hidden="true">#</a> 502、504 错误产生原因及解决方式</h3><h4 id="_502" tabindex="-1"><a class="header-anchor" href="#_502" aria-hidden="true">#</a> 502</h4><p>502 表示网关错误，当 PHP-CGI 得到一个无效响应，网关就会输出这个错误</p><ul><li><code>php.ini</code> 的 memory_limit 过小</li><li><code>php-fpm.conf</code> 中 max_children、max_requests 设置不合理</li><li><code>php-fpm.conf</code> 中 request_terminate_timeout、max_execution_time 设置不合理</li><li>php-fpm 进程处理不过来，进程数不足、脚本存在性能问题</li></ul><h4 id="_504" tabindex="-1"><a class="header-anchor" href="#_504" aria-hidden="true">#</a> 504</h4><p>504 表示网关超时，PHP-CGI 没有在指定时间响应请求，网关将输出这个错误</p><ul><li>Nginx+PHP 架构，可以调整 FastCGI 超时时间，fastcgi_connect_timeout、fastcgi_send_timeout、fastcgi_read_timeout</li></ul><h4 id="_500" tabindex="-1"><a class="header-anchor" href="#_500" aria-hidden="true">#</a> 500</h4><p>php 代码问题，文件权限问题，资源问题</p><h4 id="_503" tabindex="-1"><a class="header-anchor" href="#_503" aria-hidden="true">#</a> 503</h4><p>超载或者停机维护</p><h3 id="如何返回一个301重定向" tabindex="-1"><a class="header-anchor" href="#如何返回一个301重定向" aria-hidden="true">#</a> 如何返回一个301重定向</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;HTTP/1.1 301 Moved Permanently&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Location: https://blog.maplemark.cn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="php-与-mysql-连接方式" tabindex="-1"><a class="header-anchor" href="#php-与-mysql-连接方式" aria-hidden="true">#</a> PHP 与 MySQL 连接方式</h3><h4 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySQL</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;127.0.0.1:3306&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;root&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;123456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;SET NAMES &#39;utf8&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$select_db</span> <span class="token operator">=</span> <span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$select_db</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;SELECT * FROM \`user\` LIMIT 1&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">mysql_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mysqli" tabindex="-1"><a class="header-anchor" href="#mysqli" aria-hidden="true">#</a> MySQLi</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$conn</span> <span class="token operator">=</span> @<span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;127.0.0.1:3306&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;root&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;123456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_errno</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;set names &#39;utf8&#39;;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$select_db</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">select_db</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$select_db</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">error</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;SELECT * FROM \`user\` LIMIT 1&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token property">error</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token operator">-&gt;</span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$res</span><span class="token operator">-&gt;</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$conn</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="pdo" tabindex="-1"><a class="header-anchor" href="#pdo" aria-hidden="true">#</a> PDO</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;mysql:host=127.0.0.1:3306;dbname=user&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;root&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;123456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;set names &#39;utf8&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;SELECT * FROM \`user\` LIMIT 1&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">PARAM_STR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$rs</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$rs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">FETCH_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mysql、mysqli、pdo-区别" tabindex="-1"><a class="header-anchor" href="#mysql、mysqli、pdo-区别" aria-hidden="true">#</a> MySQL、MySQLi、PDO 区别</h3><h4 id="mysql-1" tabindex="-1"><a class="header-anchor" href="#mysql-1" aria-hidden="true">#</a> MySQL</h4><ul><li>允许 PHP 应用与 MySQL 数据库交互的早期扩展</li><li>提供了一个面向过程的接口，不支持后期的一些特性</li></ul><h4 id="mysqli-1" tabindex="-1"><a class="header-anchor" href="#mysqli-1" aria-hidden="true">#</a> MySQLi</h4><ul><li>面向对象接口</li><li>prepared 语句支持</li><li>多语句执行支持</li><li>事务支持</li><li>增强的调试能力</li></ul><h4 id="pdo-1" tabindex="-1"><a class="header-anchor" href="#pdo-1" aria-hidden="true">#</a> PDO</h4><ul><li>PHP 应用中的一个数据库抽象层规范</li><li>PDO 提供一个统一的 API 接口，无须关心数据库类型</li><li>使用标准的 PDO API，可以快速无缝切换数据库</li></ul><h3 id="数据库持久连接" tabindex="-1"><a class="header-anchor" href="#数据库持久连接" aria-hidden="true">#</a> 数据库持久连接</h3><p>把 PHP 用作多进程 web 服务器的一个模块，这种方法目前只适用于 Apache。</p><p>对于一个多进程的服务器，其典型特征是有一个父进程和一组子进程协调运行，其中实际生成 web 页面的是子进程。每当客户端向父进程提出请求时，该请求会被传递给还没有被其它的客户端请求占用的子进程。这也就是说当相同的客户端第二次向服务端提出请求时，它将有可能被一个不同的子进程来处理。在开启了一个持久连接后，所有请求 SQL 服务的后继页面都能够重用这个已经建立的 SQL Server 连接。</p><h3 id="代码执行过程" tabindex="-1"><a class="header-anchor" href="#代码执行过程" aria-hidden="true">#</a> 代码执行过程</h3><p>PHP 代码 =&gt; 启动 php 及 zend 引擎，加载注册拓展模块 =&gt; 对代码进行词法/语法分析 =&gt; 编译成opcode(opcache) =&gt; 执行 opcode</p><blockquote><p>PHP7 新增了抽象语法树(AST)，在语法分析阶段生成 AST，然后再生成 opcode 数组</p></blockquote><h3 id="base64-编码原理" tabindex="-1"><a class="header-anchor" href="#base64-编码原理" aria-hidden="true">#</a> base64 编码原理</h3><figure><img src="`+c+'" alt="base64" tabindex="0" loading="lazy"><figcaption>base64</figcaption></figure><h3 id="ip2long-实现" tabindex="-1"><a class="header-anchor" href="#ip2long-实现" aria-hidden="true">#</a> ip2long 实现</h3><figure><img src="'+d+`" alt="ip2long" tabindex="0" loading="lazy"><figcaption>ip2long</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>124.205.30.150=2093817494

list($p1,$p2,$p3,$p4) = explode(&#39;.&#39;,&#39;124.205.30.150&#39;);

$realNum = ($p1&lt;&lt;24)+($p2&lt;&lt;16)+($p3&lt;&lt;8)+$p4;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mvc-的理解" tabindex="-1"><a class="header-anchor" href="#mvc-的理解" aria-hidden="true">#</a> MVC 的理解</h3><p>MVC 包括三类对象。模型 Model 是应用对象，视图 View 是它在屏幕上的表示，控制器 Controller 定义用户界面对用户输入的响应方式。不使用 MVC，用户界面设计往往将这些对象混在一起，而 MVC 则将它们分离以提高灵活性和复用性</p><h3 id="主流-php-框架特点" tabindex="-1"><a class="header-anchor" href="#主流-php-框架特点" aria-hidden="true">#</a> 主流 PHP 框架特点</h3><h4 id="laravel" tabindex="-1"><a class="header-anchor" href="#laravel" aria-hidden="true">#</a> Laravel</h4><p>易于访问，功能强大，并提供大型，强大的应用程序所需的工具</p><ul><li>简单快速的路由引擎</li><li>强大的依赖注入容器</li><li>富有表现力，直观的数据库 ORM</li><li>提供数据库迁移功能</li><li>灵活的任务调度器</li><li>实时事件广播</li></ul><h4 id="symfony" tabindex="-1"><a class="header-anchor" href="#symfony" aria-hidden="true">#</a> Symfony</h4><ul><li>Database engine-independent</li><li>Simple to use, in most cases, but still flexible enough to adapt to complex cases</li><li>Based on the premise of convention over configuration--the developer needs to configure only the unconventional</li><li>Compliant with most web best practices and design patterns</li><li>Enterprise-ready--adaptable to existing information technology (IT) policies and architectures, and stable enough for long-term projects</li><li>Very readable code, with phpDocumentor comments, for easy maintenance</li><li>Easy to extend, allowing for integration with other vendor libraries</li></ul><h4 id="codeigniter" tabindex="-1"><a class="header-anchor" href="#codeigniter" aria-hidden="true">#</a> CodeIgniter</h4><ul><li>基于模型-视图-控制器的系统</li><li>框架比较轻量</li><li>全功能数据库类，支持多个平台</li><li>Query Builder 数据库支持</li><li>表单和数据验证</li><li>安全性和 XSS 过滤</li><li>全页面缓存</li></ul><h4 id="thinkphp" tabindex="-1"><a class="header-anchor" href="#thinkphp" aria-hidden="true">#</a> ThinkPHP</h4><ul><li>采用容器统一管理对象</li><li>支持 Facade</li><li>更易用的路由</li><li>注解路由支持</li><li>路由跨域请求支持</li><li>验证类增强</li><li>配置和路由目录独立</li><li>取消系统常量</li><li>类库别名机制</li><li>模型和数据库增强</li><li>依赖注入完善</li><li>支持 PSR-3 日志规范</li><li>中间件支持</li><li>支持 Swoole/Workerman 运行</li></ul><h3 id="对象关系映射-orm" tabindex="-1"><a class="header-anchor" href="#对象关系映射-orm" aria-hidden="true">#</a> 对象关系映射/ORM</h3><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h4><ul><li>缩短编码时间、减少甚至免除对 model 的编码，降低数据库学习成本</li><li>动态的数据表映射，在表结构发生改变时，减少代码修改</li><li>可以很方便的引入附加功能(cache 层)</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h4><ul><li>映射消耗性能、ORM 对象消耗内存</li><li>SQL 语句较为复杂时，ORM 语法可读性不高(使用原生 SQL)</li></ul><h3 id="链式调用实现" tabindex="-1"><a class="header-anchor" href="#链式调用实现" aria-hidden="true">#</a> 链式调用实现</h3><p>类定义一个内置变量，让类中其他定义方法可访问到</p><h3 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h3><p>set_exception_handler — 设置用户自定义的异常处理函数</p><p>使用 try / catch 捕获</p><h3 id="串行、并行、并发的区别" tabindex="-1"><a class="header-anchor" href="#串行、并行、并发的区别" aria-hidden="true">#</a> 串行、并行、并发的区别</h3><p>串行：执行多个任务时，各个任务按顺序执行，完成一个之后才能进行下一个 并行：多个任务在同一时刻执行 并发：同一时刻需要执行多个任务</p><h3 id="同步与异步的理解" tabindex="-1"><a class="header-anchor" href="#同步与异步的理解" aria-hidden="true">#</a> 同步与异步的理解</h3><p><strong>同步和异步是一种消息通信机制</strong>。其关注点在于 <code>被调用者返回</code> 和 <code>结果返回</code> 之间的关系，描述对象是被调用对象的行为。</p><h3 id="阻塞与非阻塞的理解" tabindex="-1"><a class="header-anchor" href="#阻塞与非阻塞的理解" aria-hidden="true">#</a> 阻塞与非阻塞的理解</h3><p><strong>阻塞和非阻塞是一种业务流程处理方式</strong>。其关注点在于调用发生时 <code>调用者状态</code> 和 <code>被调用者返回结果</code> 之间的关系，描述对象是等待结果时候调用者的状态。</p><h3 id="同步阻塞与非同步阻塞的理解" tabindex="-1"><a class="header-anchor" href="#同步阻塞与非同步阻塞的理解" aria-hidden="true">#</a> 同步阻塞与非同步阻塞的理解</h3><p>同步阻塞：打电话问老板有没有某书（调用），老板说查一下，让你别挂电话（同步），你一直等待老板给你结果，什么事也不做（阻塞）。</p><p>同步非阻塞：打电话问老板有没有某书（调用），老板说查一下，让你别挂电话（同步），等电话的过程中你还一边嗑瓜子（非阻塞）。</p><h3 id="异步阻塞与异步非阻塞的理解" tabindex="-1"><a class="header-anchor" href="#异步阻塞与异步非阻塞的理解" aria-hidden="true">#</a> 异步阻塞与异步非阻塞的理解</h3><p>异步阻塞：打电话问老板有没有某书（调用），老板说你先挂电话，有了结果通知你（异步），你挂了电话后（结束调用）, 除了等老板电话通知结果，什么事情也不做（阻塞）。</p><p>异步非阻塞：打电话问老板有没有某书（调用），老板说你先挂电话，有了结果通知你（异步），你挂电话后（结束调用），一遍等电话，一遍嗑瓜子。（非阻塞）</p><h3 id="如何实现异步调用" tabindex="-1"><a class="header-anchor" href="#如何实现异步调用" aria-hidden="true">#</a> 如何实现异步调用</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fsockopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;blog.maplemark.cn&quot;</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$fp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token variable">$errstr</span></span> (<span class="token interpolation"><span class="token variable">$errno</span></span>)&lt;br /&gt;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;GET /backend.php  / HTTP/1.1\\r\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token variable">$out</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">&quot;Host: blog.maplemark.cn\\r\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token variable">$out</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">&quot;Connection: Close\\r\\n\\r\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token variable">$out</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*忽略执行结果
    while (!feof($fp)) {
        echo fgets($fp, 128);
    }*/</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多进程同时写一个文件" tabindex="-1"><a class="header-anchor" href="#多进程同时写一个文件" aria-hidden="true">#</a> 多进程同时写一个文件</h3><p>加锁、队列</p><h3 id="php-进程模型-进程通讯方式-进程线程区别" tabindex="-1"><a class="header-anchor" href="#php-进程模型-进程通讯方式-进程线程区别" aria-hidden="true">#</a> PHP 进程模型，进程通讯方式，进程线程区别</h3><p>消息队列、socket、信号量、共享内存、信号、管道</p><h3 id="php-支持回调的函数-实现一个" tabindex="-1"><a class="header-anchor" href="#php-支持回调的函数-实现一个" aria-hidden="true">#</a> PHP 支持回调的函数，实现一个</h3><p>array_map、array_filter、array_walk、usort</p><p>is_callable + callbacks + 匿名函数实现</p><h3 id="发起-http-请求有哪几种方式-它们有何区别" tabindex="-1"><a class="header-anchor" href="#发起-http-请求有哪几种方式-它们有何区别" aria-hidden="true">#</a> 发起 HTTP 请求有哪几种方式，它们有何区别</h3><p>cURL、file_get_contents、fopen、fsockopen</p><h3 id="php-for-while-foreach-迭代数组时候-哪个效率最高" tabindex="-1"><a class="header-anchor" href="#php-for-while-foreach-迭代数组时候-哪个效率最高" aria-hidden="true">#</a> php for while foreach 迭代数组时候，哪个效率最高</h3><h3 id="弱类型变量如何实现" tabindex="-1"><a class="header-anchor" href="#弱类型变量如何实现" aria-hidden="true">#</a> 弱类型变量如何实现</h3><p>PHP 中声明的变量，在 zend 引擎中都是用结构体 zval 来保存，通过共同体实现弱类型变量声明</p><h3 id="php-拓展初始化" tabindex="-1"><a class="header-anchor" href="#php-拓展初始化" aria-hidden="true">#</a> PHP 拓展初始化</h3><ul><li>初始化拓展</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ php /php-src/ext/ext_skel.php <span class="token parameter variable">--ext</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>定义拓展函数</li></ul><p>zend_module_entry 定义 Extension name 编写 PHP_FUNCTION 函数</p><ul><li>编译安装</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ phpize $ ./configure $ <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="如何获取扩展安装路径" tabindex="-1"><a class="header-anchor" href="#如何获取扩展安装路径" aria-hidden="true">#</a> 如何获取扩展安装路径</h3><h3 id="垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#垃圾回收机制" aria-hidden="true">#</a> 垃圾回收机制</h3><p>引用计数器</p><h3 id="trait" tabindex="-1"><a class="header-anchor" href="#trait" aria-hidden="true">#</a> Trait</h3><p>自 PHP 5.4.0 起，PHP 实现了一种代码复用的方法，称为 trait</p><h3 id="yield-是什么-说个使用场景-yield、yield-核心原理是什么" tabindex="-1"><a class="header-anchor" href="#yield-是什么-说个使用场景-yield、yield-核心原理是什么" aria-hidden="true">#</a> yield 是什么，说个使用场景 yield、yield 核心原理是什么</h3><p>一个生成器函数看起来像一个普通的函数，不同的是普通函数返回一个值，而一个生成器可以yield生成许多它所需要的值。</p><p>yield核心原理: PHP在使用生成器的时候，会返回一个Generator类的对象。每一次迭代，PHP会通过Generator实例计算出下一次需要迭代的值。简述即yield用于生成值。</p><p>yield使用场景：读取大文件、大量计算。</p><p>yield好处：节省内存、优化性能</p><h3 id="traits-与-interfaces-区别-及-traits-解决了什么痛点" tabindex="-1"><a class="header-anchor" href="#traits-与-interfaces-区别-及-traits-解决了什么痛点" aria-hidden="true">#</a> traits 与 interfaces 区别 及 traits 解决了什么痛点</h3><h3 id="如何-foreach-迭代对象、如何数组化操作对象-obj-key-、如何函数化对象-obj-123" tabindex="-1"><a class="header-anchor" href="#如何-foreach-迭代对象、如何数组化操作对象-obj-key-、如何函数化对象-obj-123" aria-hidden="true">#</a> 如何 foreach 迭代对象、如何数组化操作对象 $obj[key]、如何函数化对象 $obj(123);</h3><h3 id="swoole-适用场景-协程实现方式" tabindex="-1"><a class="header-anchor" href="#swoole-适用场景-协程实现方式" aria-hidden="true">#</a> Swoole 适用场景，协程实现方式</h3><p>Swoole 是一个使用 C++ 语言编写的基于异步事件驱动和协程的并行网络通信引擎，为 PHP 提供协程、高性能网络编程支持。提供了多种通信协议的网络服务器和客户端模块，可以方便快速的实现 TCP/UDP服务、高性能Web、WebSocket服务、物联网、实时通讯、游戏、微服务等，使 PHP 不再局限于传统的 Web 领域。</p><p>协程可以简单理解为线程，只不过这个线程是用户态的，不需要操作系统参与，创建销毁和切换的成本非常低，和线程不同的是协程没法利用多核 cpu 的，想利用多核 cpu 需要依赖 Swoole 的多进程模型。 在底层实现上是单线程的，因此同一时间只有一个协程在工作，协程的执行是串行的。 采用 CSP 编程模型，即不要以共享内存的方式来通信，相反，要通过通信来共享内存。 swoole4.0采用双栈方式，通过栈桢切换来实现协程；即遇到IO等待就切换到。</p><h4 id="swoole的进程模型" tabindex="-1"><a class="header-anchor" href="#swoole的进程模型" aria-hidden="true">#</a> swoole的进程模型</h4><p>同一台主机上两个进程间通信 (简称 IPC) 的方式有很多种，在 Swoole 中使用了 2 种方式 Unix Socket 和 sysvmsg。</p><p>swoole启动后会生成master进程、reactor线程、worker进程、task进程以及manager进程</p><p>master进程是一个多线程进程，会生成多个reactor线程 reactor线程负载网络监听、数据收发 work进程处理reactor线程投递的请求数据 task进程处理work进程投递的任务 manager进程用于管理work进程和task进程</p><h3 id="php-数组底层实现-hashtable-linked-list" tabindex="-1"><a class="header-anchor" href="#php-数组底层实现-hashtable-linked-list" aria-hidden="true">#</a> PHP 数组底层实现 （HashTable + Linked list）</h3><p>PHP 数组底层依赖的散列表数据结构，定义如下（位于 Zend/zend_types.h）。</p><p>数据存储在一个散列表中，通过中间层来保存索引与实际存储在散列表中位置的映射。</p><p>由于哈希函数会存在哈希冲突的可能，因此对冲突的值采用链表来保存。</p><p>哈希表的查询效率是o（1），链表查询效率是o（n）；因此PHP数据索引速度很快；但是相对比较占用空间。</p><h3 id="copy-on-write-原理-何时-gc" tabindex="-1"><a class="header-anchor" href="#copy-on-write-原理-何时-gc" aria-hidden="true">#</a> Copy on write 原理，何时 GC</h3><h3 id="如何解决-php-内存溢出问题" tabindex="-1"><a class="header-anchor" href="#如何解决-php-内存溢出问题" aria-hidden="true">#</a> 如何解决 PHP 内存溢出问题</h3><h3 id="zval" tabindex="-1"><a class="header-anchor" href="#zval" aria-hidden="true">#</a> ZVAL</h3><h3 id="hashtable" tabindex="-1"><a class="header-anchor" href="#hashtable" aria-hidden="true">#</a> HashTable</h3><h3 id="php7-新特性" tabindex="-1"><a class="header-anchor" href="#php7-新特性" aria-hidden="true">#</a> PHP7 新特性</h3><p>标量类型声明、返回值类型声明、通过 define() 定义常量数组、匿名类、相同命名空间类一次性导入</p><h3 id="php7-底层优化" tabindex="-1"><a class="header-anchor" href="#php7-底层优化" aria-hidden="true">#</a> PHP7 底层优化</h3><p>ZVAL 结构体优化，占用由24字节降低为16字节</p><p>内部类型 zend_string，结构体成员变量采用 char 数组，不是用 char*</p><p>PHP 数组实现由 hashtable 变为 zend array</p><p>函数调用机制，改进函数调用机制，通过优化参数传递环节，减少了一些指令</p><h3 id="psr-介绍-psr-1-2-4-7" tabindex="-1"><a class="header-anchor" href="#psr-介绍-psr-1-2-4-7" aria-hidden="true">#</a> PSR 介绍，PSR-1, 2, 4, 7</h3><h3 id="xhprof-、xdebug-性能调试工具使用" tabindex="-1"><a class="header-anchor" href="#xhprof-、xdebug-性能调试工具使用" aria-hidden="true">#</a> Xhprof 、Xdebug 性能调试工具使用</h3><h3 id="字符串、数字比较大小的原理-注意-0-开头的8进制、0x-开头16进制" tabindex="-1"><a class="header-anchor" href="#字符串、数字比较大小的原理-注意-0-开头的8进制、0x-开头16进制" aria-hidden="true">#</a> 字符串、数字比较大小的原理，注意 0 开头的8进制、0x 开头16进制</h3><h3 id="bom-头是什么-怎么除去" tabindex="-1"><a class="header-anchor" href="#bom-头是什么-怎么除去" aria-hidden="true">#</a> BOM 头是什么，怎么除去</h3>`,167),f=a("p",null,[n("WINDOWS自带的记事本，在保存一个以 UTF-8 编码的文件时，会在文件开始的地方插入三个不可见的字符（0xEF 0xBB 0xBF，即BOM）；它是一串隐藏的字符，用于让记事本等编辑器识别这个文件是否以UTF-8编码。 去除方法："),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"r"),a("mi",null,"e"),a("mi",null,"s"),a("mi",null,"u"),a("mi",null,"l"),a("mi",null,"t"),a("mo",null,"="),a("mi",null,"t"),a("mi",null,"r"),a("mi",null,"i"),a("mi",null,"m"),a("mo",{stretchy:"false"},"(")]),a("annotation",{encoding:"application/x-tex"},"result = trim(")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathnormal"},"res"),a("span",{class:"mord mathnormal"},"u"),a("span",{class:"mord mathnormal"},"lt"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord mathnormal"},"t"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),a("span",{class:"mord mathnormal"},"im"),a("span",{class:"mopen"},"(")])])]),n('result, "\\xEF\\xBB\\xBF");')],-1),_=a("h3",{id:"模板引擎是什么-解决什么问题、实现原理-smarty、twig、blade",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#模板引擎是什么-解决什么问题、实现原理-smarty、twig、blade","aria-hidden":"true"},"#"),n(" 模板引擎是什么，解决什么问题、实现原理（Smarty、Twig、Blade）")],-1),x=a("h3",{id:"写一个函数-尽可能高效的从一个标准-url-中取出文件的扩展名",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#写一个函数-尽可能高效的从一个标准-url-中取出文件的扩展名","aria-hidden":"true"},"#"),n(" 写一个函数，尽可能高效的从一个标准 URL 中取出文件的扩展名")],-1),y=a("p",null,"parse_str,explode",-1);function q(P,w){const e=r("RouterLink");return i(),p("div",null,[h,a("p",null,[n("拓展阅读 "),l(e,{to:"/interview/PHP/03.echo%E3%80%81print%E3%80%81print_r%E3%80%81var_dump%E5%8C%BA%E5%88%AB.html"},{default:o(()=>[n("《echo、print、print_r、var_dump区别》")]),_:1})]),k,m,b,v,g,f,_,x,y])}const S=t(u,[["render",q],["__file","QA.html.vue"]]);export{S as default};
