import{_ as a,W as i,X as l,Y as e,Z as o,$ as n,a2 as r,C as c}from"./framework-7d1f27fd.js";const d={},s=e("h1",{id:"浏览器的同源策略",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#浏览器的同源策略","aria-hidden":"true"},"#"),o(" 浏览器的同源策略")],-1),h=e("p",null,"同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。",-1),p=e("h2",{id:"同源的定义",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#同源的定义","aria-hidden":"true"},"#"),o(" 同源的定义")],-1),m=e("p",null,'如果两个页面的协议，端口（如果有指定）和主机都相同，则两个页面具有相同的源。我们也可以把它称为“协议/主机/端口 tuple”，或简单地叫做“tuple". ("tuple" ，“元”，是指一些事物组合在一起形成一个整体，比如（1，2）叫二元，（1，2，3）叫三元)',-1),u=e("p",null,[o("下表给出了相对 "),e("code",null,"http://store.company.com/dir/page.html"),o(" 同源检测的示例:")],-1),_=e("thead",null,[e("tr",null,[e("th",null,"URL"),e("th",null,"结果"),e("th",null,"原因")])],-1),w={href:"http://store.company.com/dir2/other.html",target:"_blank",rel:"noopener noreferrer"},f=e("td",null,"成功",-1),g=e("td",null,"只有路径不同",-1),b={href:"http://store.company.com/dir/inner/another.html",target:"_blank",rel:"noopener noreferrer"},k=e("td",null,"成功",-1),y=e("td",null,"只有路径不同",-1),x={href:"https://store.company.com/secure.html",target:"_blank",rel:"noopener noreferrer"},S=e("td",null,"失败",-1),C=e("td",null,"不同协议 ( https和http )",-1),v={href:"http://store.company.com:81/dir/etc.html",target:"_blank",rel:"noopener noreferrer"},L=e("td",null,"失败",-1),q=e("td",null,"不同端口 ( http:// 80是默认的)",-1),R={href:"http://news.company.com/dir/other.html",target:"_blank",rel:"noopener noreferrer"},T=e("td",null,"失败",-1),I=e("td",null,"不同域名 ( news和store )",-1),E=r('<h3 id="源的继承" tabindex="-1"><a class="header-anchor" href="#源的继承" aria-hidden="true">#</a> 源的继承</h3><p>在页面中用 about:blank 或 javascript: URL 执行的脚本会继承打开该 URL 的文档的源，因为这些类型的 URLs 没有明确包含有关原始服务器的信息。</p><p>例如，about:blank 通常作为父脚本写入内容的新的空白弹出窗口的 URL（例如，通过 Window.open() 机制）。 如果此弹出窗口也包含代码，则该代码将继承与创建它的脚本相同的源。</p><blockquote><p>注意：在Gecko 6.0之前，如果用户在位置栏中输入 data URLs，data URLs 将继承当前浏览器窗口中网页的安全上下文。</p></blockquote><blockquote><p>data：URLs 获得一个新的，空的安全上下文。</p></blockquote><h3 id="ie-例外" tabindex="-1"><a class="header-anchor" href="#ie-例外" aria-hidden="true">#</a> IE 例外</h3><p>当涉及到同源策略时，Internet Explorer 有两个主要的不同点</p>',7),P=e("li",null,"授信范围（Trust Zones）：两个相互之间高度互信的域名，如公司域名（corporate domains），不遵守同源策略的限制。",-1),U={href:"http://company.com:81/index.html",target:"_blank",rel:"noopener noreferrer"},F={href:"http://company.com/index.html",target:"_blank",rel:"noopener noreferrer"},H=e("p",null,"这些例外是非标准的，其它浏览器也未做出支持，但会助于开发基于window RT IE的应用程序。",-1),M=e("h2",{id:"源的更改",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#源的更改","aria-hidden":"true"},"#"),o(" 源的更改")],-1),N=e("code",null,"document.domain",-1),W={href:"http://store.company.com/dir/other.html",target:"_blank",rel:"noopener noreferrer"},j=r(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">&quot;company.com&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),V={href:"http://company.com/dir/page.html",target:"_blank",rel:"noopener noreferrer"},B={href:"http://company.com/dir/page.html",target:"_blank",rel:"noopener noreferrer"},G={href:"http://company.com",target:"_blank",rel:"noopener noreferrer"},J={href:"http://company.com",target:"_blank",rel:"noopener noreferrer"},O={href:"http://othercompany.com",target:"_blank",rel:"noopener noreferrer"},D={href:"http://company.com",target:"_blank",rel:"noopener noreferrer"},X={href:"http://company.com:8080",target:"_blank",rel:"noopener noreferrer"},z={href:"http://company.com",target:"_blank",rel:"noopener noreferrer"},A={href:"http://xn--company-cx3kj79p.com",target:"_blank",rel:"noopener noreferrer"},Z=r('<blockquote><p>注意：使用 document.domain 来允许子域安全访问其父域时，您需要在父域和子域中设置 document.domain 为相同的值。这是必要的，即使这样做只是将父域设置回其原始值。不这样做可能会导致权限错误</p></blockquote><h2 id="跨源网络访问" tabindex="-1"><a class="header-anchor" href="#跨源网络访问" aria-hidden="true">#</a> 跨源网络访问</h2><p>同源策略控制了不同源之间的交互，例如在使用<code>XMLHttpRequest</code> 或 <code>&lt;img&gt;</code> 标签时则会受到同源策略的约束。这些交互通常分为三类：</p><ul><li>通常允许跨域写操作（Cross-origin writes）。例如链接（links），重定向以及表单提交。特定少数的HTTP请求需要添加 preflight。</li><li>通常允许跨域资源嵌入（Cross-origin embedding）。之后下面会举例说明。</li><li>通常不允许跨域读操作（Cross-origin reads）。但常可以通过内嵌资源来巧妙的进行读取访问。例如可以读取嵌入图片的高度和宽度，调用内嵌脚本的方法，或availability of an embedded resource.</li></ul><p>以下是可能嵌入跨源的资源的一些示例：</p><ul><li><code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code> 标签嵌入跨域脚本。语法错误信息只能在同源脚本中捕捉到。</li><li><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;</code> 标签嵌入CSS。由于CSS的松散的语法规则，CSS的跨域需要一个设置正确的Content-Type 消息头。不同浏览器有不同的限制： IE, Firefox, Chrome, Safari (跳至CVE-2010-0051)部分 和 Opera。</li><li><code>&lt;img&gt;</code>嵌入图片。支持的图片格式包括PNG,JPEG,GIF,BMP,SVG,...</li><li><code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code> 嵌入多媒体资源。</li><li><code>&lt;object&gt;</code>, <code>&lt;embed&gt;</code> 和 <code>&lt;applet&gt;</code> 的插件。</li><li>@font-face 引入的字体。一些浏览器允许跨域字体（ cross-origin fonts），一些需要同源字体（same-origin fonts）。</li><li><code>&lt;frame&gt;</code> 和 <code>&lt;iframe&gt;</code> 载入的任何资源。站点可以使用X-Frame-Options消息头来阻止这种形式的跨域交互。</li></ul><h3 id="如何允许跨源访问" tabindex="-1"><a class="header-anchor" href="#如何允许跨源访问" aria-hidden="true">#</a> 如何允许跨源访问</h3><p>使用 CORS 允许跨源访问。</p><h3 id="如何阻止跨源访问" tabindex="-1"><a class="header-anchor" href="#如何阻止跨源访问" aria-hidden="true">#</a> 如何阻止跨源访问</h3><ul><li>阻止跨域写操作，只要检测请求中的一个不可测的标记(CSRF token)即可，这个标记被称为Cross-Site Request Forgery (CSRF) 标记。必须使用这个标记来阻止页面的跨站读操作。</li><li>阻止资源的跨站读取，需要保证该资源是不可嵌入的。阻止嵌入行为是必须的，因为嵌入资源通常向其暴露信息。</li><li>阻止跨站嵌入，需要确保你的资源不能是以上列出的可嵌入资源格式。多数情况下浏览器都不会遵守 Conten-Type 消息头。例如，如果您在HTML文档中指定 <code>&lt;script&gt;</code> 标记，则浏览器将尝试将HTML解析为JavaScript。 当您的资源不是您网站的入口点时，您还可以使用CSRF令牌来防止嵌入。</li></ul><h2 id="跨源脚本api访问" tabindex="-1"><a class="header-anchor" href="#跨源脚本api访问" aria-hidden="true">#</a> 跨源脚本API访问</h2><p>Javascript的APIs中，如 iframe.contentWindow, window.parent, window.open 和 window.opener 允许文档间直接相互引用。当两个文档的源不同时，这些引用方式将对 Window 和 Location对象的访问添加限制，如下两节所述。</p><p>为了在不同源中文档进一步交流，可以使用window.postMessage。</p><h3 id="window" tabindex="-1"><a class="header-anchor" href="#window" aria-hidden="true">#</a> Window</h3>',14),Y={href:"http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#security-window",target:"_blank",rel:"noopener noreferrer"},$=r('<p>允许以下对 Window 属性的跨源访问：</p><h4 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h4><p>window.blur window.close window.focus window.postMessage</p><h4 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h4><p>window.closed 只读 window.frames 只读 window.length 只读 window.location 读/写 window.opener 只读 window.parent 只读 window.self 只读 window.top 只读 window.window 只读</p><p>某些浏览器允许访问比规范允许的更多属性。</p><h3 id="location" tabindex="-1"><a class="header-anchor" href="#location" aria-hidden="true">#</a> Location</h3>',7),K={href:"http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#security-location",target:"_blank",rel:"noopener noreferrer"},Q=r('<p>允许以下对 Location 属性的跨源访问：</p><h4 id="方法-1" tabindex="-1"><a class="header-anchor" href="#方法-1" aria-hidden="true">#</a> 方法</h4><p>location.replace</p><h4 id="属性-1" tabindex="-1"><a class="header-anchor" href="#属性-1" aria-hidden="true">#</a> 属性</h4><p>URLUtils.href 只写</p><p>某些浏览器允许访问比规范允许的更多属性。</p><h2 id="跨源数据存储访问" tabindex="-1"><a class="header-anchor" href="#跨源数据存储访问" aria-hidden="true">#</a> 跨源数据存储访问</h2><p>存储在浏览器中的数据，如localStorage和IndexedDB，以源进行分割。每个源都拥有自己单独的存储空间，一个源中的Javascript脚本不能对属于其它源的数据进行读写操作。</p><p>Cookies 使用不同的源定义方式。一个页面可以为本域和任何父域设置cookie，只要是父域不是公共后缀（public suffix）即可。Firefox 和 Chrome 使用 Public Suffix List 决定一个域是否是一个公共后缀（public suffix）。Internet Explorer使用其自己的内部方法来确定域是否是公共后缀。不管使用哪个协议（HTTP/HTTPS）或端口号，浏览器都允许给定的域以及其任何子域名(sub-domains) 访问 cookie。设置 cookie 时，你可以使用Domain，Path，Secure，和Http-Only标记来限定其访问性。读取 cookie 时，不会知晓它的出处。 即使您仅使用安全的https连接，您看到的任何cookie都可能使用不安全的连接进行设置。</p><p><strong>本文转载自 MDN web docs，<a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" rel="nofollow">《浏览器的同源策略》</a></strong></p>',10);function ee(oe,te){const t=c("ExternalLinkIcon");return i(),l("div",null,[s,h,p,m,u,e("table",null,[_,e("tbody",null,[e("tr",null,[e("td",null,[e("a",w,[o("http://store.company.com/dir2/other.html"),n(t)])]),f,g]),e("tr",null,[e("td",null,[e("a",b,[o("http://store.company.com/dir/inner/another.html"),n(t)])]),k,y]),e("tr",null,[e("td",null,[e("a",x,[o("https://store.company.com/secure.html"),n(t)])]),S,C]),e("tr",null,[e("td",null,[e("a",v,[o("http://store.company.com:81/dir/etc.html"),n(t)])]),L,q]),e("tr",null,[e("td",null,[e("a",R,[o("http://news.company.com/dir/other.html"),n(t)])]),T,I])])]),E,e("ul",null,[P,e("li",null,[o("端口：IE 未将端口号加入到同源策略的组成部分之中，因此 "),e("a",U,[o("http://company.com:81/index.html"),n(t)]),o(" 和 "),e("a",F,[o("http://company.com/index.html"),n(t)]),o(" 属于同源并且不受任何限制。")])]),H,M,e("p",null,[o("页面可能会因某些限制而改变他的源。脚本可以将 "),N,o(" 的值设置为其当前域或其当前域的父域。如果将其设置为其当前域的父域，则这个较短的父域将用于后续源检查。假设 "),e("a",W,[o("http://store.company.com/dir/other.html"),n(t)]),o(" 文档中的一个脚本执行以下语句：")]),j,e("p",null,[o("这条语句执行之后，页面将会成功地通过对 "),e("a",V,[o("http://company.com/dir/page.html"),n(t)]),o(" 的同源检测（假设"),e("a",B,[o("http://company.com/dir/page.html"),n(t)]),o(" 将其 document.domain 设置为“"),e("a",G,[o("company.com"),n(t)]),o("”，以表明它希望允许这样做 - 更多有关信息，请参阅 document.domain ）。然而，"),e("a",J,[o("company.com"),n(t)]),o(" 不能设置 document.domain 为 "),e("a",O,[o("othercompany.com"),n(t)]),o("，因为它不是 "),e("a",D,[o("company.com"),n(t)]),o(" 的父域。")]),e("p",null,[o("端口号是由浏览器另行检查的。任何对document.domain的赋值操作，包括 document.domain = document.domain 都会导致端口号被重写为 null 。因此 "),e("a",X,[o("company.com:8080"),n(t)]),o(' 不能仅通过设置 document.domain = "'),e("a",z,[o("company.com"),n(t)]),o('" '),e("a",A,[o("来与company.com"),n(t)]),o(" 通信。必须在他们双方中都进行赋值，以确保端口号都为 null 。")]),Z,e("p",null,[o("规范: "),e("a",Y,[o("http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#security-window"),n(t)]),o(".")]),$,e("p",null,[o("规范: "),e("a",K,[o("http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#security-location"),n(t)]),o(".")]),Q])}const re=a(d,[["render",ee],["__file","12.浏览器的同源策略.html.vue"]]);export{re as default};
